//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3053.
// 
#pragma warning disable 1591

namespace Lokad.Api.WebReference {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TimeSeries2Soap", Namespace="http://lokad.com/ws_2/")]
    public partial class TimeSeries2 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetSeriesByPrefixOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTasksBySerieIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSeriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSeriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSeriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSerieSegmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSerieSegmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTagsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEventsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTagsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEventsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetForecastsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPartnerOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TimeSeries2() {
            this.Url = "http://localhost:52559/TimeSeries2.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetSeriesByPrefixCompletedEventHandler GetSeriesByPrefixCompleted;
        
        /// <remarks/>
        public event GetTasksBySerieIDsCompletedEventHandler GetTasksBySerieIDsCompleted;
        
        /// <remarks/>
        public event AddReportCompletedEventHandler AddReportCompleted;
        
        /// <remarks/>
        public event AddSeriesCompletedEventHandler AddSeriesCompleted;
        
        /// <remarks/>
        public event DeleteSeriesCompletedEventHandler DeleteSeriesCompleted;
        
        /// <remarks/>
        public event GetSeriesCompletedEventHandler GetSeriesCompleted;
        
        /// <remarks/>
        public event UpdateSerieSegmentsCompletedEventHandler UpdateSerieSegmentsCompleted;
        
        /// <remarks/>
        public event GetSerieSegmentsCompletedEventHandler GetSerieSegmentsCompleted;
        
        /// <remarks/>
        public event SetTagsCompletedEventHandler SetTagsCompleted;
        
        /// <remarks/>
        public event SetEventsCompletedEventHandler SetEventsCompleted;
        
        /// <remarks/>
        public event GetTagsCompletedEventHandler GetTagsCompleted;
        
        /// <remarks/>
        public event GetEventsCompletedEventHandler GetEventsCompleted;
        
        /// <remarks/>
        public event AddTasksCompletedEventHandler AddTasksCompleted;
        
        /// <remarks/>
        public event GetTasksCompletedEventHandler GetTasksCompleted;
        
        /// <remarks/>
        public event UpdateTasksCompletedEventHandler UpdateTasksCompleted;
        
        /// <remarks/>
        public event DeleteTasksCompletedEventHandler DeleteTasksCompleted;
        
        /// <remarks/>
        public event GetForecastsCompletedEventHandler GetForecastsCompleted;
        
        /// <remarks/>
        public event GetAccountInfoCompletedEventHandler GetAccountInfoCompleted;
        
        /// <remarks/>
        public event SetPartnerCompletedEventHandler SetPartnerCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/GetSeriesByPrefix", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SerieInfoPage GetSeriesByPrefix(Identity identity, string prefix, System.Guid cursor, int pageSize) {
            object[] results = this.Invoke("GetSeriesByPrefix", new object[] {
                        identity,
                        prefix,
                        cursor,
                        pageSize});
            return ((SerieInfoPage)(results[0]));
        }
        
        /// <remarks/>
        public void GetSeriesByPrefixAsync(Identity identity, string prefix, System.Guid cursor, int pageSize) {
            this.GetSeriesByPrefixAsync(identity, prefix, cursor, pageSize, null);
        }
        
        /// <remarks/>
        public void GetSeriesByPrefixAsync(Identity identity, string prefix, System.Guid cursor, int pageSize, object userState) {
            if ((this.GetSeriesByPrefixOperationCompleted == null)) {
                this.GetSeriesByPrefixOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSeriesByPrefixOperationCompleted);
            }
            this.InvokeAsync("GetSeriesByPrefix", new object[] {
                        identity,
                        prefix,
                        cursor,
                        pageSize}, this.GetSeriesByPrefixOperationCompleted, userState);
        }
        
        private void OnGetSeriesByPrefixOperationCompleted(object arg) {
            if ((this.GetSeriesByPrefixCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSeriesByPrefixCompleted(this, new GetSeriesByPrefixCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/GetTasksBySerieIDs", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskInfo[] GetTasksBySerieIDs(Identity identity, System.Guid[] serieIDs) {
            object[] results = this.Invoke("GetTasksBySerieIDs", new object[] {
                        identity,
                        serieIDs});
            return ((TaskInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTasksBySerieIDsAsync(Identity identity, System.Guid[] serieIDs) {
            this.GetTasksBySerieIDsAsync(identity, serieIDs, null);
        }
        
        /// <remarks/>
        public void GetTasksBySerieIDsAsync(Identity identity, System.Guid[] serieIDs, object userState) {
            if ((this.GetTasksBySerieIDsOperationCompleted == null)) {
                this.GetTasksBySerieIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTasksBySerieIDsOperationCompleted);
            }
            this.InvokeAsync("GetTasksBySerieIDs", new object[] {
                        identity,
                        serieIDs}, this.GetTasksBySerieIDsOperationCompleted, userState);
        }
        
        private void OnGetTasksBySerieIDsOperationCompleted(object arg) {
            if ((this.GetTasksBySerieIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTasksBySerieIDsCompleted(this, new GetTasksBySerieIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/AddReport", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid AddReport(Identity identity, Report report) {
            object[] results = this.Invoke("AddReport", new object[] {
                        identity,
                        report});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void AddReportAsync(Identity identity, Report report) {
            this.AddReportAsync(identity, report, null);
        }
        
        /// <remarks/>
        public void AddReportAsync(Identity identity, Report report, object userState) {
            if ((this.AddReportOperationCompleted == null)) {
                this.AddReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddReportOperationCompleted);
            }
            this.InvokeAsync("AddReport", new object[] {
                        identity,
                        report}, this.AddReportOperationCompleted, userState);
        }
        
        private void OnAddReportOperationCompleted(object arg) {
            if ((this.AddReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddReportCompleted(this, new AddReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/AddSeries", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid[] AddSeries(Identity identity, SerieInfo[] series) {
            object[] results = this.Invoke("AddSeries", new object[] {
                        identity,
                        series});
            return ((System.Guid[])(results[0]));
        }
        
        /// <remarks/>
        public void AddSeriesAsync(Identity identity, SerieInfo[] series) {
            this.AddSeriesAsync(identity, series, null);
        }
        
        /// <remarks/>
        public void AddSeriesAsync(Identity identity, SerieInfo[] series, object userState) {
            if ((this.AddSeriesOperationCompleted == null)) {
                this.AddSeriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSeriesOperationCompleted);
            }
            this.InvokeAsync("AddSeries", new object[] {
                        identity,
                        series}, this.AddSeriesOperationCompleted, userState);
        }
        
        private void OnAddSeriesOperationCompleted(object arg) {
            if ((this.AddSeriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSeriesCompleted(this, new AddSeriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/DeleteSeries", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSeries(Identity identity, System.Guid[] serieIDs) {
            this.Invoke("DeleteSeries", new object[] {
                        identity,
                        serieIDs});
        }
        
        /// <remarks/>
        public void DeleteSeriesAsync(Identity identity, System.Guid[] serieIDs) {
            this.DeleteSeriesAsync(identity, serieIDs, null);
        }
        
        /// <remarks/>
        public void DeleteSeriesAsync(Identity identity, System.Guid[] serieIDs, object userState) {
            if ((this.DeleteSeriesOperationCompleted == null)) {
                this.DeleteSeriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSeriesOperationCompleted);
            }
            this.InvokeAsync("DeleteSeries", new object[] {
                        identity,
                        serieIDs}, this.DeleteSeriesOperationCompleted, userState);
        }
        
        private void OnDeleteSeriesOperationCompleted(object arg) {
            if ((this.DeleteSeriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSeriesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/GetSeries", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SerieInfoPage GetSeries(Identity identity, System.Guid cursor, int pageSize) {
            object[] results = this.Invoke("GetSeries", new object[] {
                        identity,
                        cursor,
                        pageSize});
            return ((SerieInfoPage)(results[0]));
        }
        
        /// <remarks/>
        public void GetSeriesAsync(Identity identity, System.Guid cursor, int pageSize) {
            this.GetSeriesAsync(identity, cursor, pageSize, null);
        }
        
        /// <remarks/>
        public void GetSeriesAsync(Identity identity, System.Guid cursor, int pageSize, object userState) {
            if ((this.GetSeriesOperationCompleted == null)) {
                this.GetSeriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSeriesOperationCompleted);
            }
            this.InvokeAsync("GetSeries", new object[] {
                        identity,
                        cursor,
                        pageSize}, this.GetSeriesOperationCompleted, userState);
        }
        
        private void OnGetSeriesOperationCompleted(object arg) {
            if ((this.GetSeriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSeriesCompleted(this, new GetSeriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/UpdateSerieSegments", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateSerieSegments(Identity identity, SegmentForSerie[] segments) {
            this.Invoke("UpdateSerieSegments", new object[] {
                        identity,
                        segments});
        }
        
        /// <remarks/>
        public void UpdateSerieSegmentsAsync(Identity identity, SegmentForSerie[] segments) {
            this.UpdateSerieSegmentsAsync(identity, segments, null);
        }
        
        /// <remarks/>
        public void UpdateSerieSegmentsAsync(Identity identity, SegmentForSerie[] segments, object userState) {
            if ((this.UpdateSerieSegmentsOperationCompleted == null)) {
                this.UpdateSerieSegmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSerieSegmentsOperationCompleted);
            }
            this.InvokeAsync("UpdateSerieSegments", new object[] {
                        identity,
                        segments}, this.UpdateSerieSegmentsOperationCompleted, userState);
        }
        
        private void OnUpdateSerieSegmentsOperationCompleted(object arg) {
            if ((this.UpdateSerieSegmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSerieSegmentsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/GetSerieSegments", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SerieSegmentPage GetSerieSegments(Identity identity, System.Guid[] serieIDs, SegmentCursor cursor, int pageSize) {
            object[] results = this.Invoke("GetSerieSegments", new object[] {
                        identity,
                        serieIDs,
                        cursor,
                        pageSize});
            return ((SerieSegmentPage)(results[0]));
        }
        
        /// <remarks/>
        public void GetSerieSegmentsAsync(Identity identity, System.Guid[] serieIDs, SegmentCursor cursor, int pageSize) {
            this.GetSerieSegmentsAsync(identity, serieIDs, cursor, pageSize, null);
        }
        
        /// <remarks/>
        public void GetSerieSegmentsAsync(Identity identity, System.Guid[] serieIDs, SegmentCursor cursor, int pageSize, object userState) {
            if ((this.GetSerieSegmentsOperationCompleted == null)) {
                this.GetSerieSegmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSerieSegmentsOperationCompleted);
            }
            this.InvokeAsync("GetSerieSegments", new object[] {
                        identity,
                        serieIDs,
                        cursor,
                        pageSize}, this.GetSerieSegmentsOperationCompleted, userState);
        }
        
        private void OnGetSerieSegmentsOperationCompleted(object arg) {
            if ((this.GetSerieSegmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSerieSegmentsCompleted(this, new GetSerieSegmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/SetTags", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetTags(Identity identity, TagsForSerie[] tagsForSerie) {
            this.Invoke("SetTags", new object[] {
                        identity,
                        tagsForSerie});
        }
        
        /// <remarks/>
        public void SetTagsAsync(Identity identity, TagsForSerie[] tagsForSerie) {
            this.SetTagsAsync(identity, tagsForSerie, null);
        }
        
        /// <remarks/>
        public void SetTagsAsync(Identity identity, TagsForSerie[] tagsForSerie, object userState) {
            if ((this.SetTagsOperationCompleted == null)) {
                this.SetTagsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTagsOperationCompleted);
            }
            this.InvokeAsync("SetTags", new object[] {
                        identity,
                        tagsForSerie}, this.SetTagsOperationCompleted, userState);
        }
        
        private void OnSetTagsOperationCompleted(object arg) {
            if ((this.SetTagsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTagsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/SetEvents", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetEvents(Identity identity, EventsForSerie[] eventsForSerie) {
            this.Invoke("SetEvents", new object[] {
                        identity,
                        eventsForSerie});
        }
        
        /// <remarks/>
        public void SetEventsAsync(Identity identity, EventsForSerie[] eventsForSerie) {
            this.SetEventsAsync(identity, eventsForSerie, null);
        }
        
        /// <remarks/>
        public void SetEventsAsync(Identity identity, EventsForSerie[] eventsForSerie, object userState) {
            if ((this.SetEventsOperationCompleted == null)) {
                this.SetEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEventsOperationCompleted);
            }
            this.InvokeAsync("SetEvents", new object[] {
                        identity,
                        eventsForSerie}, this.SetEventsOperationCompleted, userState);
        }
        
        private void OnSetEventsOperationCompleted(object arg) {
            if ((this.SetEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEventsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/GetTags", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TagsForSerie[] GetTags(Identity identity, System.Guid[] serieIDs) {
            object[] results = this.Invoke("GetTags", new object[] {
                        identity,
                        serieIDs});
            return ((TagsForSerie[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTagsAsync(Identity identity, System.Guid[] serieIDs) {
            this.GetTagsAsync(identity, serieIDs, null);
        }
        
        /// <remarks/>
        public void GetTagsAsync(Identity identity, System.Guid[] serieIDs, object userState) {
            if ((this.GetTagsOperationCompleted == null)) {
                this.GetTagsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTagsOperationCompleted);
            }
            this.InvokeAsync("GetTags", new object[] {
                        identity,
                        serieIDs}, this.GetTagsOperationCompleted, userState);
        }
        
        private void OnGetTagsOperationCompleted(object arg) {
            if ((this.GetTagsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTagsCompleted(this, new GetTagsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/GetEvents", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EventsForSerie[] GetEvents(Identity identity, System.Guid[] serieIDs) {
            object[] results = this.Invoke("GetEvents", new object[] {
                        identity,
                        serieIDs});
            return ((EventsForSerie[])(results[0]));
        }
        
        /// <remarks/>
        public void GetEventsAsync(Identity identity, System.Guid[] serieIDs) {
            this.GetEventsAsync(identity, serieIDs, null);
        }
        
        /// <remarks/>
        public void GetEventsAsync(Identity identity, System.Guid[] serieIDs, object userState) {
            if ((this.GetEventsOperationCompleted == null)) {
                this.GetEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEventsOperationCompleted);
            }
            this.InvokeAsync("GetEvents", new object[] {
                        identity,
                        serieIDs}, this.GetEventsOperationCompleted, userState);
        }
        
        private void OnGetEventsOperationCompleted(object arg) {
            if ((this.GetEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEventsCompleted(this, new GetEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/AddTasks", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid[] AddTasks(Identity identity, TaskInfo[] tasks) {
            object[] results = this.Invoke("AddTasks", new object[] {
                        identity,
                        tasks});
            return ((System.Guid[])(results[0]));
        }
        
        /// <remarks/>
        public void AddTasksAsync(Identity identity, TaskInfo[] tasks) {
            this.AddTasksAsync(identity, tasks, null);
        }
        
        /// <remarks/>
        public void AddTasksAsync(Identity identity, TaskInfo[] tasks, object userState) {
            if ((this.AddTasksOperationCompleted == null)) {
                this.AddTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTasksOperationCompleted);
            }
            this.InvokeAsync("AddTasks", new object[] {
                        identity,
                        tasks}, this.AddTasksOperationCompleted, userState);
        }
        
        private void OnAddTasksOperationCompleted(object arg) {
            if ((this.AddTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTasksCompleted(this, new AddTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/GetTasks", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskInfoPage GetTasks(Identity identity, System.Guid cursor, int pageSize) {
            object[] results = this.Invoke("GetTasks", new object[] {
                        identity,
                        cursor,
                        pageSize});
            return ((TaskInfoPage)(results[0]));
        }
        
        /// <remarks/>
        public void GetTasksAsync(Identity identity, System.Guid cursor, int pageSize) {
            this.GetTasksAsync(identity, cursor, pageSize, null);
        }
        
        /// <remarks/>
        public void GetTasksAsync(Identity identity, System.Guid cursor, int pageSize, object userState) {
            if ((this.GetTasksOperationCompleted == null)) {
                this.GetTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTasksOperationCompleted);
            }
            this.InvokeAsync("GetTasks", new object[] {
                        identity,
                        cursor,
                        pageSize}, this.GetTasksOperationCompleted, userState);
        }
        
        private void OnGetTasksOperationCompleted(object arg) {
            if ((this.GetTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTasksCompleted(this, new GetTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/UpdateTasks", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateTasks(Identity identity, TaskInfo[] tasks) {
            this.Invoke("UpdateTasks", new object[] {
                        identity,
                        tasks});
        }
        
        /// <remarks/>
        public void UpdateTasksAsync(Identity identity, TaskInfo[] tasks) {
            this.UpdateTasksAsync(identity, tasks, null);
        }
        
        /// <remarks/>
        public void UpdateTasksAsync(Identity identity, TaskInfo[] tasks, object userState) {
            if ((this.UpdateTasksOperationCompleted == null)) {
                this.UpdateTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTasksOperationCompleted);
            }
            this.InvokeAsync("UpdateTasks", new object[] {
                        identity,
                        tasks}, this.UpdateTasksOperationCompleted, userState);
        }
        
        private void OnUpdateTasksOperationCompleted(object arg) {
            if ((this.UpdateTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTasksCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/DeleteTasks", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteTasks(Identity identity, System.Guid[] taskIDs) {
            this.Invoke("DeleteTasks", new object[] {
                        identity,
                        taskIDs});
        }
        
        /// <remarks/>
        public void DeleteTasksAsync(Identity identity, System.Guid[] taskIDs) {
            this.DeleteTasksAsync(identity, taskIDs, null);
        }
        
        /// <remarks/>
        public void DeleteTasksAsync(Identity identity, System.Guid[] taskIDs, object userState) {
            if ((this.DeleteTasksOperationCompleted == null)) {
                this.DeleteTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTasksOperationCompleted);
            }
            this.InvokeAsync("DeleteTasks", new object[] {
                        identity,
                        taskIDs}, this.DeleteTasksOperationCompleted, userState);
        }
        
        private void OnDeleteTasksOperationCompleted(object arg) {
            if ((this.DeleteTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTasksCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/GetForecasts", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Forecast[] GetForecasts(Identity identity, System.Guid[] taskIDs) {
            object[] results = this.Invoke("GetForecasts", new object[] {
                        identity,
                        taskIDs});
            return ((Forecast[])(results[0]));
        }
        
        /// <remarks/>
        public void GetForecastsAsync(Identity identity, System.Guid[] taskIDs) {
            this.GetForecastsAsync(identity, taskIDs, null);
        }
        
        /// <remarks/>
        public void GetForecastsAsync(Identity identity, System.Guid[] taskIDs, object userState) {
            if ((this.GetForecastsOperationCompleted == null)) {
                this.GetForecastsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetForecastsOperationCompleted);
            }
            this.InvokeAsync("GetForecasts", new object[] {
                        identity,
                        taskIDs}, this.GetForecastsOperationCompleted, userState);
        }
        
        private void OnGetForecastsOperationCompleted(object arg) {
            if ((this.GetForecastsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetForecastsCompleted(this, new GetForecastsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/GetAccountInfo", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AccountInfo GetAccountInfo(Identity identity) {
            object[] results = this.Invoke("GetAccountInfo", new object[] {
                        identity});
            return ((AccountInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountInfoAsync(Identity identity) {
            this.GetAccountInfoAsync(identity, null);
        }
        
        /// <remarks/>
        public void GetAccountInfoAsync(Identity identity, object userState) {
            if ((this.GetAccountInfoOperationCompleted == null)) {
                this.GetAccountInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountInfoOperationCompleted);
            }
            this.InvokeAsync("GetAccountInfo", new object[] {
                        identity}, this.GetAccountInfoOperationCompleted, userState);
        }
        
        private void OnGetAccountInfoOperationCompleted(object arg) {
            if ((this.GetAccountInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountInfoCompleted(this, new GetAccountInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lokad.com/ws_2/SetPartner", RequestNamespace="http://lokad.com/ws_2/", ResponseNamespace="http://lokad.com/ws_2/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetPartner(Identity identity, long partnerId) {
            this.Invoke("SetPartner", new object[] {
                        identity,
                        partnerId});
        }
        
        /// <remarks/>
        public void SetPartnerAsync(Identity identity, long partnerId) {
            this.SetPartnerAsync(identity, partnerId, null);
        }
        
        /// <remarks/>
        public void SetPartnerAsync(Identity identity, long partnerId, object userState) {
            if ((this.SetPartnerOperationCompleted == null)) {
                this.SetPartnerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPartnerOperationCompleted);
            }
            this.InvokeAsync("SetPartner", new object[] {
                        identity,
                        partnerId}, this.SetPartnerOperationCompleted, userState);
        }
        
        private void OnSetPartnerOperationCompleted(object arg) {
            if ((this.SetPartnerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPartnerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetSeriesByPrefixCompletedEventHandler(object sender, GetSeriesByPrefixCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSeriesByPrefixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSeriesByPrefixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SerieInfoPage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SerieInfoPage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTasksBySerieIDsCompletedEventHandler(object sender, GetTasksBySerieIDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTasksBySerieIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTasksBySerieIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void AddReportCompletedEventHandler(object sender, AddReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void AddSeriesCompletedEventHandler(object sender, AddSeriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSeriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSeriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteSeriesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetSeriesCompletedEventHandler(object sender, GetSeriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSeriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSeriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SerieInfoPage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SerieInfoPage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateSerieSegmentsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetSerieSegmentsCompletedEventHandler(object sender, GetSerieSegmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSerieSegmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSerieSegmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SerieSegmentPage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SerieSegmentPage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetTagsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetEventsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTagsCompletedEventHandler(object sender, GetTagsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TagsForSerie[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TagsForSerie[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetEventsCompletedEventHandler(object sender, GetEventsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EventsForSerie[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EventsForSerie[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void AddTasksCompletedEventHandler(object sender, AddTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetTasksCompletedEventHandler(object sender, GetTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskInfoPage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskInfoPage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateTasksCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteTasksCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetForecastsCompletedEventHandler(object sender, GetForecastsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetForecastsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetForecastsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Forecast[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Forecast[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetAccountInfoCompletedEventHandler(object sender, GetAccountInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AccountInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AccountInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SetPartnerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591