<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lokad.Shared</name>
    </assembly>
    <members>
        <member name="T:GlobalAssemblyInfo">
            <summary>
             Assembly information class that is shared between all projects
            </summary>
        </member>
        <member name="T:System.ActionExtensions">
            <summary>
            Extensions for the <see cref="T:System.Action"/>
            </summary>
        </member>
        <member name="M:System.ActionExtensions.AsDisposable(System.Action)">
            <summary>
            Converts the action into <see cref="T:System.DisposableAction"/>
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="T:System.ActionPolicy">
            <summary>
            Policy that could be applied to delegates to
            augment their behavior (i.e. to retry on problems)
            </summary>
        </member>
        <member name="M:System.ActionPolicy.#ctor(System.Action{System.Action})">
            <summary>
            Initializes a new instance of the <see cref="T:System.ActionPolicy"/> class.
            </summary>
            <param name="policy">The policy.</param>
        </member>
        <member name="M:System.ActionPolicy.Do(System.Action)">
            <summary>
            Performs the specified action within the policy.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:System.ActionPolicy.Get``1(System.Func{``0})">
            <summary>
            Performs the specified action within the policy and returns the result
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="action">The action to perform.</param>
            <returns>result returned by <paramref name="action"/></returns>
        </member>
        <member name="F:System.ActionPolicy.Null">
            <summary>
            Action policy that does not do anything
            </summary>
        </member>
        <member name="M:System.ActionPolicy.With(System.ExceptionHandler)">
            <summary> Starts building <see cref="T:System.ActionPolicy"/> 
            that can handle exceptions, as determined by 
            <paramref name="handler"/> </summary>
            <param name="handler">The exception handler.</param>
            <returns>syntax</returns>
        </member>
        <member name="M:System.ActionPolicy.Handle``1">
            <summary> Starts building simple <see cref="T:System.ActionPolicy"/>
            that can handle <typeparamref name="TException"/> </summary>
            <typeparam name="TException">The type of the exception to handle.</typeparam>
            <returns>syntax</returns>
        </member>
        <member name="M:System.ActionPolicy.Handle``2">
            <summary> Starts building simple <see cref="T:System.ActionPolicy"/>
            that can handle <typeparamref name="TEx1"/> or <typeparamref name="TEx1"/>
            </summary>
            <typeparam name="TEx1">The type of the exception to handle.</typeparam>
            <typeparam name="TEx2">The type of the exception to handle.</typeparam>
            <returns>syntax</returns>
        </member>
        <member name="M:System.ActionPolicy.Handle``3">
            <summary> Starts building simple <see cref="T:System.ActionPolicy"/>
            that can handle <typeparamref name="TEx1"/> or <typeparamref name="TEx1"/>
            </summary>
            <typeparam name="TEx1">The first type of the exception to handle.</typeparam>
            <typeparam name="TEx2">The second of the exception to handle.</typeparam>
            <typeparam name="TEx3">The third of the exception to handle.</typeparam>
            <returns>syntax</returns>
        </member>
        <member name="T:System.ActionPolicyWithState">
            <summary>
            Same as <see cref="T:System.ActionPolicy"/>, but indicates that this policy
            holds some state and thus must have syncronized access.
            </summary>
        </member>
        <member name="M:System.ActionPolicyWithState.#ctor(System.Action{System.Action})">
            <summary>
            Initializes a new instance of the <see cref="T:System.ActionPolicyWithState"/> class.
            </summary>
            <param name="policy">The policy.</param>
        </member>
        <member name="T:System.ArrayExtensions">
            <summary>
            Shortcuts for some common array operations
            </summary>
        </member>
        <member name="M:System.ArrayExtensions.Convert``2(``0[],System.Converter{``0,``1})">
            <summary>
            Shorthand extension method for converting the arrays
            </summary>
            <typeparam name="TSource">The type of the source array.</typeparam>
            <typeparam name="TTarget">The type of the target array.</typeparam>
            <param name="self">The array to convert.</param>
            <param name="converter">The converter.</param>
            <returns>target array instance</returns>
        </member>
        <member name="M:System.ArrayExtensions.Convert``2(``0[],System.Func{``0,System.Int32,``1})">
            <summary>
            Shorthand extension method for converting the arrays
            </summary>
            <typeparam name="TSource">The type of the source array.</typeparam>
            <typeparam name="TTarget">The type of the target array.</typeparam>
            <param name="source">The array to convert.</param>
            <param name="converter">The converter, where the second parameter is an index of item being converted.</param>
            <returns>target array instance</returns>
        </member>
        <member name="M:System.ArrayExtensions.ToArray``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            Shorthand extension method for converting enumerables into the arrays
            </summary>
            <typeparam name="TSource">The type of the source array.</typeparam>
            <typeparam name="TTarget">The type of the target array.</typeparam>
            <param name="self">The collection to convert.</param>
            <param name="converter">The converter, where the second parameter is an index of item being converted.</param>
            <returns>target array instance</returns>
        </member>
        <member name="M:System.ArrayExtensions.ForEach``1(``0[],System.Action{``0})">
            <summary>
            Applies the action to each item in the array
            </summary>
            <typeparam name="T">type of the items in the array</typeparam>
            <param name="self">The array to walk through.</param>
            <param name="action">The action.</param>
            <returns>Same array instance</returns>
        </member>
        <member name="M:System.ArrayExtensions.Append``1(``0[],``0[])">
            <summary>
            Joins arrays together
            </summary>
            <typeparam name="T">type of the arrays</typeparam>
            <param name="self">The first array to join.</param>
            <param name="second">The second array to join.</param>
            <returns>Joined array</returns>
        </member>
        <member name="M:System.ArrayExtensions.SliceArray``1(``0[],System.Int32)">
            <summary>
            Slices array into array of arrays of length up to <paramref name="sliceLength"/>
            </summary>
            <typeparam name="T">Type of the items int the array</typeparam>
            <param name="array">The array.</param>
            <param name="sliceLength">Length of the slice.</param>
            <returns>array of sliced arrays</returns>
            <exception cref="T:System.ArgumentNullException">When source array is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="sliceLength"/> is invalid</exception>
        </member>
        <member name="T:System.Diagnostics.ExceptionStatistics">
            <summary>
            Final statistics about the exceptions in some system
            </summary>
        </member>
        <member name="M:System.Diagnostics.ExceptionStatistics.#ctor(System.Guid,System.Int64,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.ExceptionStatistics"/> class.
            </summary>
            <param name="id">The exception ID.</param>
            <param name="count">The exception count.</param>
            <param name="exception">The exception to associate with.</param>
        </member>
        <member name="M:System.Diagnostics.ExceptionStatistics.#ctor(System.Guid,System.Int64,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.ExceptionStatistics"/> class.
            </summary>
            <param name="id">Exception ID.</param>
            <param name="count">Exception count.</param>
            <param name="name">Exception name.</param>
            <param name="message">Exception message.</param>
            <param name="text">Exception text.</param>
        </member>
        <member name="P:System.Diagnostics.ExceptionStatistics.ID">
            <summary>
            Gets the unique identifier of the exception
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:System.Diagnostics.ExceptionStatistics.Count">
            <summary>
            Gets the number of times this exception did occur.
            </summary>
            <value>The number of times this exception did occur.</value>
        </member>
        <member name="P:System.Diagnostics.ExceptionStatistics.Name">
            <summary>
            Gets the name of the exception.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:System.Diagnostics.ExceptionStatistics.Message">
            <summary>
            Gets the message associated with the exception.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:System.Diagnostics.ExceptionStatistics.Text">
            <summary>
            Gets the textual representation of the exception.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:System.Reflection.Express">
            <summary>
            Helper class for the Expression-based strongly-typed reflection
            </summary>
        </member>
        <member name="M:System.Reflection.Express.MethodWithLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> 
            from the provided <paramref name="method"/>.
            </summary>
            <param name="method">The method expression.</param>
            <returns>method information</returns>
        </member>
        <member name="M:System.Reflection.Express.ConstructorWithLamda(System.Linq.Expressions.LambdaExpression)">
            <summary> Gets the <see cref="T:System.Reflection.ConstructorInfo"/> from the 
            provided <paramref name="constructor"/> lambda. </summary>
            <param name="constructor">The constructor expression.</param>
            <returns>constructor information</returns>
        </member>
        <member name="M:System.Reflection.Express.MemberWithLambda(System.Linq.Expressions.LambdaExpression)">
            <summary> Gets the <see cref="T:System.Reflection.MemberInfo"/> (field or property) 
            from the  provided <paramref name="member"/> </summary>
            <param name="member">The property expression.</param>
            <returns>member information</returns>
        </member>
        <member name="M:System.Reflection.Express.PropertyWithLambda(System.Linq.Expressions.LambdaExpression)">
            <summary> Gets the <see cref="T:System.Reflection.PropertyInfo"/> from the provided
            <paramref name="property"/> expression. </summary>
            <param name="property">The property expression.</param>
            <returns>property information</returns>
        </member>
        <member name="M:System.Reflection.Express.FieldWithLambda(System.Linq.Expressions.LambdaExpression)">
            <summary> Gets the <see cref="T:System.Reflection.FieldInfo"/> from the provided 
            <paramref name="field"/> expression. </summary>
            <param name="field">The field expression.</param>
            <returns>field information</returns>
        </member>
        <member name="M:System.Reflection.Express.Method(System.Linq.Expressions.Expression{System.Action})">
            <summary> Gets the <see cref="T:System.Reflection.MethodInfo"/> 
            from the provided <paramref name="method"/>.
            </summary>
            <param name="method">The method expression.</param>
            <returns>method information</returns>
        </member>
        <member name="M:System.Reflection.Express.Constructor``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the <see cref="T:System.Reflection.ConstructorInfo"/> 
            from the provided <paramref name="constructorExpression"/>.
            </summary>
            <param name="constructorExpression">The constructor expression.</param>
            <returns>constructor information</returns>
        </member>
        <member name="M:System.Reflection.Express.Property``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary> Gets the <see cref="T:System.Reflection.PropertyInfo"/> from the provided
            <paramref name="property"/> expression. </summary>
            <param name="property">The property expression.</param>
            <returns>property information</returns>
        </member>
        <member name="M:System.Reflection.Express.Field``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary> Gets the <see cref="T:System.Reflection.FieldInfo"/> from the provided 
            <paramref name="field"/> expression. </summary>
            <param name="field">The field expression.</param>
            <returns>field information</returns>
        </member>
        <member name="T:System.Reflection.Express`1">
            <summary>
            Helper class for the Expression-based strongly-typed reflection
            </summary>
        </member>
        <member name="M:System.Reflection.Express`1.Method(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary> Gets the <see cref="T:System.Reflection.MethodInfo"/> from 
            the provided <paramref name="method"/> expression. </summary>
            <param name="method">The expression.</param>
            <returns>method information</returns>
            <seealso cref="M:System.Reflection.Express.MethodWithLambda(System.Linq.Expressions.LambdaExpression)"/>
        </member>
        <member name="M:System.Reflection.Express`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary> Gets the <see cref="T:System.Reflection.PropertyInfo"/> from the provided
            <paramref name="property"/> expression. </summary>
            <param name="property">The property expression.</param>
            <returns>property information</returns>
            <seealso cref="M:System.Reflection.Express.MemberWithLambda(System.Linq.Expressions.LambdaExpression)"/>
            <seealso cref="M:System.Reflection.Express.PropertyWithLambda(System.Linq.Expressions.LambdaExpression)"/>
        </member>
        <member name="M:System.Reflection.Express`1.Field``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary> Gets the <see cref="T:System.Reflection.FieldInfo"/> from the provided 
            <paramref name="field"/> expression. </summary>
            <param name="field">The field expression.</param>
            <returns>field information</returns>
            <seealso cref="M:System.Reflection.Express.MemberWithLambda(System.Linq.Expressions.LambdaExpression)"/>
            <seealso cref="M:System.Reflection.Express.FieldWithLambda(System.Linq.Expressions.LambdaExpression)"/>
        </member>
        <member name="T:System.ArrayUtil">
            <summary>
            Utility class to manipulate arrays of arrays
            </summary>
        </member>
        <member name="M:System.ArrayUtil.IsNullOrEmpty(System.Array)">
            <summary>
            Returns <em>True</em> if the provided array is null or empty
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="T:System.AssemblyUtil">
            <summary>
            Helper class for the managing .NET assemblies
            </summary>
        </member>
        <member name="M:System.AssemblyUtil.GetAssemblyConfiguration">
            <summary>
            Retrieves value of the <see cref="T:System.Reflection.AssemblyConfigurationAttribute"/> for the current assembly
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">When the attribute is missing</exception>
        </member>
        <member name="M:System.AssemblyUtil.GetAssemblyDescription">
            <summary>
            If <see cref="T:System.Reflection.AssemblyDescriptionAttribute"/> is present in the calling assembly, 
            then its value is retrieved. <see cref="F:System.String.Empty"/> is returned otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.CancelEventArgs`1">
            <summary>
            Generic class for sending typed cancel events around
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:System.EventArgs`1">
            <summary>
            Generic class for passing around event arguments.
            It does not allow to change the data value, as opposed to <see cref="T:System.ControlArgs`1"/>
            </summary>
            <typeparam name="T">Type of data to be passed.</typeparam>
        </member>
        <member name="M:System.EventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.EventArgs`1"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:System.EventArgs`1.Data">
            <summary>
            Read-only data associated with the event
            </summary>
        </member>
        <member name="M:System.CancelEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.CancelEventArgs`1"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:System.CancelEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:System.CancelEventArgs`1"/> has cancel flag.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:System.Container.ComponentAttribute">
            <summary>
             This attribute marks the class for the type-based registration
            </summary>
             <remarks>
             Attribute-based registration is used in cases, when it is
             needed to keep registration properties (i.e. scope) close
             to the component in the code.
             </remarks>
        </member>
        <member name="M:System.Container.ComponentAttribute.#ctor">
            <summary>
            Is used to create type registration
            </summary>
        </member>
        <member name="M:System.Container.ComponentAttribute.#ctor(System.String)">
            <summary>
            Is used to define name-based registration
            </summary>
            <param name="name">Name of the component</param>
        </member>
        <member name="M:System.Container.ComponentAttribute.#ctor(System.Type)">
            <summary>
            Is used to define service-based registration
            </summary>
            <param name="service">Service type</param>
        </member>
        <member name="P:System.Container.ComponentAttribute.Service">
            <summary>
            Service represented by the component
            </summary>
        </member>
        <member name="P:System.Container.ComponentAttribute.Name">
            <summary>
             Name of the component
            </summary>
        </member>
        <member name="P:System.Container.ComponentAttribute.Scope">
            <summary>
            Registration scope for the component
            </summary>
        </member>
        <member name="P:System.Container.ComponentAttribute.Type">
            <summary>
            Registration type for the component
            </summary>
        </member>
        <member name="T:System.Container.DecoratorAttribute">
            <summary>
            This attribute is used by code-gen or DSL tools to mark the decorator class
            </summary>
        </member>
        <member name="M:System.Container.DecoratorAttribute.#ctor(System.Type)">
            <summary>
            Creates new instance of the <see cref="T:System.Container.DecoratorAttribute"/>
            </summary>
            <param name="service"></param>
        </member>
        <member name="P:System.Container.DecoratorAttribute.Service">
            <summary>
            Service that is implemented by the decorator
            </summary>
        </member>
        <member name="T:System.Container.DecoratorInfo">
            <summary>
            This class contains the information about some decorator.
            </summary>
        </member>
        <member name="M:System.Container.DecoratorInfo.#ctor(System.Type,System.Type)">
            <summary>
            Create new instance of the <see cref="T:System.Container.DecoratorInfo"/>
            </summary>
            <param name="decoratorClass"></param>
            <param name="service"></param>
        </member>
        <member name="P:System.Container.DecoratorInfo.DecoratorClass">
            <summary>
            Actual decorator class
            </summary>
        </member>
        <member name="P:System.Container.DecoratorInfo.Service">
            <summary>
            Inner service
            </summary>
        </member>
        <member name="T:System.Container.RegistrationScope">
            <summary>
             Registration scope for the component
            </summary>
        </member>
        <member name="F:System.Container.RegistrationScope.Singleton">
            <summary>
            Component will be created once in the root container
            </summary>
        </member>
        <member name="F:System.Container.RegistrationScope.Container">
            <summary>
            Component will be cached in the current container
            </summary>
        </member>
        <member name="F:System.Container.RegistrationScope.Factory">
            <summary>
            Every component request will return new component
            </summary>
        </member>
        <member name="T:System.ControlArgs`1">
            <summary>
            Generic class for passing around event arguments. 
            It does allow to change the data value, as opposed to <see cref="T:System.EventArgs`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.ControlArgs`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ControlArgs`1"/> class.
            </summary>
        </member>
        <member name="M:System.ControlArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ControlArgs`1"/> class using
            the provided <paramref name="data"/>.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:System.ControlArgs`1.Data">
            <summary>
            Gets or sets the event data.
            </summary>
            <value>The event data.</value>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. 
            The method itself should be marked by <see cref="T:System.Diagnostics.CodeAnalysis.AssertionMethodAttribute"/> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:System.Diagnostics.CodeAnalysis.AssertionConditionType"/>
            <remarks>This attribute helps R# in code analysis</remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.AssertionConditionAttribute.#ctor(System.Diagnostics.CodeAnalysis.AssertionConditionType)">
            <summary>
            Initializes new instance of AssertionConditionAttribute
            </summary>
            <param name="conditionType">Specifies condition type</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets condition type
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisifes the condition, then the execution continues. 
            Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.AssertionConditionType.IS_TRUE">
            <summary>
            Indicates that the marked parameter should be evaluated to true
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.AssertionConditionType.IS_FALSE">
            <summary>
            Indicates that the marked parameter should be evaluated to false
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.AssertionConditionType.IS_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to null value
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.AssertionConditionType.IS_NOT_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to not null value
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied. 
            To set the condition, mark one of the parameters with <see cref="T:System.Diagnostics.CodeAnalysis.AssertionConditionAttribute"/> attribute
            </summary>
            <seealso cref="T:System.Diagnostics.CodeAnalysis.AssertionConditionAttribute"/>
            <remarks>This attribute helps R# in code analysis</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ImmutableAttribute">
            <summary>
            Class is considered to be immutable, when all fields are read-only.
            This makes the class safe for the multi-threaded operations.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one  of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException"/> has such parameter.
            </summary>
            <remarks>This attribute helps R# in code analysis</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NoCodeCoverageAttribute">
            <summary>
            Attribute used to inform code coverage tool to ignore marked code block
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
            There is only exception to compare with <c>null</c>, it is permitted
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringFormatMethodAttribute">
            <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
            <remarks>
            This attribute helps R# in code analysis
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:System.Diagnostics.ExceptionCounter">
            <summary>
            Class holding information about exception
            </summary>
        </member>
        <member name="M:System.Diagnostics.ExceptionCounter.InterlockedIncrement">
            <summary>
            Performs atomic increment of the exception count
            </summary>
        </member>
        <member name="M:System.Diagnostics.ExceptionCounter.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.ExceptionCounter"/> class.
            </summary>
            <param name="firstInstance">The first instance.</param>
        </member>
        <member name="P:System.Diagnostics.ExceptionCounter.ID">
            <summary>
            Gets the unique identifier for the exception.
            </summary>
            <value>The unique identifier for the exception.</value>
        </member>
        <member name="P:System.Diagnostics.ExceptionCounter.FirstInstance">
            <summary>
            Gets the first instance of the exception.
            </summary>
            <value>The first instance.</value>
        </member>
        <member name="P:System.Diagnostics.ExceptionCounter.Count">
            <summary>
            Gets the exception count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:System.Diagnostics.ExecutionCounters">
            <summary>
            In-memory thread-safe collection of <see cref="T:System.Diagnostics.ExecutionCounter"/>
            </summary>
        </member>
        <member name="F:System.Diagnostics.ExecutionCounters.Default">
            <summary>
            Default instance of this counter
            </summary>
        </member>
        <member name="M:System.Diagnostics.ExecutionCounters.RegisterRange(System.Collections.Generic.IEnumerable{System.Diagnostics.ExecutionCounter})">
            <summary>
            Registers the execution counters within this collection.
            </summary>
            <param name="counters">The counters.</param>
        </member>
        <member name="M:System.Diagnostics.ExecutionCounters.ToList">
            <summary>
            Retrieves statistics for all exception counters in this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Diagnostics.ExecutionCounters.ResetAll">
            <summary>
            Resets all counters.
            </summary>
        </member>
        <member name="T:System.DoubleExtensions">
            <summary>
            Some helper shortcuts for the <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="M:System.DoubleExtensions.Round(System.Double,System.Int32)">
            <summary>
            Rounds the specified double with the provided number 
            of fractional digits.
            </summary>
            <param name="value">The value to round.</param>
            <param name="digits">The digits.</param>
            <returns>rounded value</returns>
        </member>
        <member name="T:System.Errors">
            <summary>
            Helper class for generating exceptions
            </summary>
        </member>
        <member name="M:System.Errors.KeyInvalid">
            <summary>
            Creates new instance of <see cref="T:System.KeyInvalidException"/>
            </summary>
            <returns>new exception instance</returns>
        </member>
        <member name="M:System.Errors.KeyInvalid(System.Object)">
            <summary>
            Creates new instance of <see cref="T:System.KeyInvalidException"/>
            </summary>
            <param name="value">The value.</param>
            <returns>new exception instance</returns>
        </member>
        <member name="M:System.Errors.Resolution(System.Type,System.Object,System.Exception)">
            <summary>
            Creates new instance of the <see cref="T:System.ResolutionException"/>
            </summary>
            <param name="valueType">Type of the service.</param>
            <param name="key">The service key.</param>
            <param name="inner">The inner.</param>
            <returns>new exception instance</returns>
        </member>
        <member name="M:System.Errors.Resolution(System.Type,System.Exception)">
            <summary>
            Creates new instance of the <see cref="T:System.ResolutionException"/>
            </summary>
            <param name="valueType">Type of the service.</param>
            <param name="inner">The inner.</param>
            <returns>new exception instance</returns>
        </member>
        <member name="M:System.Errors.KeyInvalid(System.Object,System.Exception)">
            <summary>
            Creates new instance of <see cref="T:System.KeyInvalidException"/>
            </summary>
            <param name="value">The value.</param>
            <param name="inner">The inner.</param>
            <returns></returns>
        </member>
        <member name="T:System.ExceptionHandler">
            <summary> This delegate represents <em>catch</em> block
            </summary>
            <param name="ex">Exception to handle</param>
            <returns><em>true</em> if we can handle exception</returns>
        </member>
        <member name="T:System.ExceptionHandlerSyntax">
            <summary> Fluent API for defining <see cref="T:System.ActionPolicy"/> 
            that allows to handle exceptions. </summary>
        </member>
        <member name="M:System.ExceptionHandlerSyntax.Retry(System.Syntax{System.ExceptionHandler},System.Int32)">
            <summary>
            Builds <see cref="T:System.ActionPolicy"/> that will retry exception handling
            for a couple of times before giving up.
            </summary>
            <param name="syntax">The syntax.</param>
            <param name="retryCount">The retry count.</param>
            <returns>reusable instance of policy</returns>
        </member>
        <member name="M:System.ExceptionHandlerSyntax.Retry(System.Syntax{System.ExceptionHandler},System.Int32,System.Action{System.Exception,System.Int32})">
            <summary>
            Builds <see cref="T:System.ActionPolicy"/> that will retry exception handling
            for a couple of times before giving up.
            </summary>
            <param name="syntax">The syntax.</param>
            <param name="retryCount">The retry count.</param>
            <param name="onRetry">The action to perform on retry (i.e.: write to log).
            First parameter is the exception and second one is its number in sequence. </param>
            <returns>reusable policy instance </returns>
        </member>
        <member name="M:System.ExceptionHandlerSyntax.RetryForever(System.Syntax{System.ExceptionHandler},System.Action{System.Exception})">
            <summary> Builds <see cref="T:System.ActionPolicy"/> that will keep retrying forever </summary>
            <param name="syntax">The syntax to extend.</param>
            <param name="onRetry">The action to perform when the exception could be retried.</param>
            <returns> reusable instance of policy</returns>
        </member>
        <member name="M:System.ExceptionHandlerSyntax.WaitAndRetry(System.Syntax{System.ExceptionHandler},System.Collections.Generic.IEnumerable{System.TimeSpan},System.Action{System.Exception,System.TimeSpan})">
            <summary> <para>Builds the policy that will keep retrying as long as 
            the exception could be handled by the <paramref name="syntax"/> being 
            built and <paramref name="sleepDurations"/> is providing the sleep intervals.
            </para>
            <para>See <see cref="T:System.Range"/> for methods to create long intervals on-the-fly</para>
            </summary>
            <param name="syntax">The syntax.</param>
            <param name="sleepDurations">The sleep durations.</param>
            <param name="onRetry">The action to perform on retry (i.e.: write to log).
            First parameter is the exception and second one is the planned sleep duration. </param>
            <returns>new policy instance</returns>
        </member>
        <member name="M:System.ExceptionHandlerSyntax.WaitAndRetry(System.Syntax{System.ExceptionHandler},System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary> <para>Builds the policy that will keep retrying as long as 
            the exception could be handled by the <paramref name="syntax"/> being 
            built and <paramref name="sleepDurations"/> is providing the sleep intervals.
            </para>
            <para>See <see cref="T:System.Range"/> for methods to create long intervals on-the-fly</para>
            </summary>
            <param name="syntax">The syntax.</param>
            <param name="sleepDurations">The sleep durations.</param>
            <returns>new policy instance</returns>
        </member>
        <member name="M:System.ExceptionHandlerSyntax.CircuitBreaker(System.Syntax{System.ExceptionHandler},System.TimeSpan,System.Int32)">
            <summary>
             <para>Builds the policy that will "break the circuit" after <paramref name="countBeforeBreaking"/>
            exceptions that could be handled by the <paramref name="syntax"/> being built. The circuit 
            stays broken for the <paramref name="duration"/>. Any attempt to
            invoke method within the policy, while the circuit is broken, will immediately re-throw
            the last exception.  </para>
            <para>If the action fails within the policy after the block period, then the breaker 
            is blocked again for the next <paramref name="duration"/>.
            It will be reset, otherwise.</para> 
            </summary>
            <param name="syntax">The syntax.</param>
            <param name="duration">How much time the breaker will stay open before resetting</param>
            <param name="countBeforeBreaking">How many exceptions are needed to break the circuit</param>
            <returns>shared policy instance</returns>
            <remarks>(see "ReleaseIT!" for the details)</remarks>
        </member>
        <member name="T:System.IDictionaryExtensions">
            <summary>
            Extensions for <see cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
        </member>
        <member name="M:System.IDictionaryExtensions.AsProvider``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Wraps the dictionary with the read-only provider instance
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="self">The dictionary.</param>
            <returns>provider instance that wraps the dictionary</returns>
        </member>
        <member name="M:System.IDictionaryExtensions.AsProvider``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Wraps the provider with the read-only provider instance
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="self">The dictionary.</param>
            <returns>provider instance that wraps the dictionary</returns>
        </member>
        <member name="M:System.IDictionaryExtensions.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Returns <paramref name="defaultValue"/> if the given <paramref name="key"/>
            is not present within the dictionary
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="self">The dictionary.</param>
            <param name="key">The key to look for.</param>
            <param name="defaultValue">The default value.</param>
            <returns>value matching <paramref name="key"/> or <paramref name="defaultValue"/> if none is found</returns>
        </member>
        <member name="T:System.Diagnostics.ExceptionLogDecorator">
            <summary>
            Simple decorator for <see cref="T:System.ILog"/> that saves 
            all incoming exceptions to the <see cref="T:System.Diagnostics.ExceptionCounters"/>
            </summary>
        </member>
        <member name="T:System.ILog">
            <summary>
            Shared interface to abstract away from the specific
            logging library
            </summary>
        </member>
        <member name="M:System.ILog.Log(System.LogLevel,System.Object)">
            <summary> Writes the message to the logger </summary>
            <param name="level">The importance level</param>
            <param name="message">The actual message</param>
        </member>
        <member name="M:System.ILog.Log(System.LogLevel,System.Exception,System.Object)">
            <summary>
            Writes the exception and associated information 
            to the logger
            </summary>
            <param name="level">The importance level</param>
            <param name="ex">The actual exception</param>
            <param name="message">Information related to the exception</param>
        </member>
        <member name="M:System.ILog.IsEnabled(System.LogLevel)">
            <summary>
            Determines whether the messages of specified level are being logged down
            </summary>
            <param name="level">The level.</param>
            <returns>
            	<c>true</c> if the specified level is logged; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Diagnostics.ExceptionLogDecorator.#ctor(System.ILog,System.Diagnostics.ExceptionCounters)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.ExceptionLogDecorator"/> class.
            </summary>
            <param name="log">The log.</param>
            <param name="counter">The counter.</param>
        </member>
        <member name="T:System.Diagnostics.TraceLog">
            <summary>
            Log that outputs to the <see cref="M:System.Diagnostics.Trace.Write(System.Object)"/>
            </summary>
        </member>
        <member name="F:System.Diagnostics.TraceLog.Instance">
            <summary>  Singleton instance </summary>
        </member>
        <member name="F:System.Diagnostics.TraceLog.Provider">
            <summary>
            Named provider for the <see cref="T:System.Diagnostics.TraceLog"/>
            </summary>
        </member>
        <member name="T:System.KeyInvalidException">
            <summary>
            This exception is thrown when the key is not valid (i.e.: not found)
            </summary>
            <remarks> TODO: add proper implementation.</remarks>
        </member>
        <member name="M:System.KeyInvalidException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.KeyInvalidException"/> class.
            </summary>
        </member>
        <member name="M:System.KeyInvalidException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.KeyInvalidException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:System.KeyInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.KeyInvalidException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:System.KeyInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.KeyInvalidException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:System.DisposableAction">
            <summary>
            Class that allows action to be executed, when it is disposed
            </summary>
        </member>
        <member name="M:System.DisposableAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DisposableAction"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:System.DisposableAction.Dispose">
            <summary>
            Executes the action
            </summary>
        </member>
        <member name="T:System.EnumUtil">
            <summary>
            Enum helper class from xLim
            </summary>
        </member>
        <member name="M:System.EnumUtil.Parse``1(System.String)">
            <summary>
            Parses the specified string into the <typeparamref name="TEnum"/>, ignoring the case
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value.</param>
            <returns>Parsed enum</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is null</exception>
        </member>
        <member name="T:System.EnumUtil`1">
            <summary>
            Strongly-typed enumeration util
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
        </member>
        <member name="F:System.EnumUtil`1.Values">
            <summary>
            Values of the <typeparamref name="TEnum"/>
            </summary>
        </member>
        <member name="T:System.EventHandlerFor`1">
            <summary>
            Represents the method that will handle a typed event.
            Associated data is read-only
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sender"></param>
            <param name="args"></param>
            <seealso cref="T:System.ControlHandlerFor`1"/>
        </member>
        <member name="T:System.Int32Extensions">
            <summary> Extensions to the <see cref="T:System.Int32"/> </summary>
        </member>
        <member name="M:System.Int32Extensions.Kb(System.Int32)">
            <summary>
            Returns kilobytes
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.Int32Extensions.Mb(System.Int32)">
            <summary>
            Returns megabytes
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:System.IProvider`2">
            <summary>
            Interface that abstracts away providers
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <remarks>
            things like IDataCache (from the Database layers) or IResolver (from the IoC layers) 
            are just samples of this interface
            </remarks>
        </member>
        <member name="M:System.IProvider`2.Get(`0)">
            <summary>
            Retrieves <typeparamref name="TValue"/> given the
            </summary>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:System.ResolutionException">when the key can not be resolved</exception>
        </member>
        <member name="T:System.IResolver">
            <summary>
            Generic resolution interface for the applications, 
            where proper infrastructure could not be setup
            </summary>
            <remarks>There are no Generic resolution methods 
            (like Resolve(Type service)), for the purpose of enforcing 
            explicit resolution logics </remarks>
        </member>
        <member name="M:System.IResolver.Get``1">
            <summary>
            Resolves this instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>requested instance of <typeparamref name="TService"/></returns>
            <exception cref="T:System.ResolutionException">if there is some resolution problem</exception>
        </member>
        <member name="M:System.IResolver.Get``1(System.String)">
            <summary>
            Resolves the specified service type.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="name">The name.</param>
            <returns>requested instance of <typeparamref name="TService"/></returns>
            <exception cref="T:System.ResolutionException">if there is resolution problem</exception>
        </member>
        <member name="T:System.Lambda`1">
            <summary>
            Helper class for creating lambda expressions that return
            anonymous types
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
        </member>
        <member name="M:System.Lambda`1.Func``1(System.Func{`0,``0})">
            <summary>
            Returns the provided function.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The func.</param>
            <returns></returns>
        </member>
        <member name="T:System.NamedProvider`1">
            <summary>
            This class provides way to create providers out of lambda shortcuts
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:System.INamedProvider`1">
            <summary>
            Shortcut interface for <see cref="T:System.IProvider`2"/> that uses <see cref="T:System.String"/> as the key.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:System.NamedProvider`1.#ctor(System.Func{System.String,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.NamedProvider`1"/> class.
            </summary>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:System.NamedProvider`1.Get(System.String)">
            <summary>
            Retrieves <typeparamref name="T"/> given the <paramref name="key"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:System.ResolutionException">when the key cannot be resolved</exception>
        </member>
        <member name="T:System.NamedProvider">
            <summary>
            Shortcuts for <see cref="T:System.NamedProvider`1"/>
            </summary>
        </member>
        <member name="M:System.NamedProvider.For``1(System.Func{System.String,``0})">
            <summary>
            Creates new instance of the <see cref="T:System.INamedProvider`1"/> out of
            the provider function (shortcut syntax)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="providerFunction">The provider function.</param>
            <returns></returns>
        </member>
        <member name="T:System.Provider`2">
            <summary>
            This class provides short-cut for creating providers
            out of lambda expressions.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:System.Provider`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Provider`2"/> class.
            </summary>
            <param name="resolver">The resolver.</param>
            <exception cref="T:System.ArgumentNullException">When 
            <paramref name="resolver"/> is null</exception>
        </member>
        <member name="M:System.Provider`2.Get(`0)">
            <summary>
            Retrieves <typeparamref name="TValue"/> given the
            </summary>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:System.ResolutionException">when the key is invalid for
            the provider</exception>
        </member>
        <member name="T:System.Provider`1">
            <summary>
            Helper class that simplifies creation of <see cref="T:System.Provider`2"/>
            </summary>
            <typeparam name="TKey">type of the Key items</typeparam>
        </member>
        <member name="M:System.Provider`1.For``1(System.Func{`0,``0})">
            <summary>
            Creates the provider, letting compiler to figure out
            the value type. This allows to use anonymous types locally as well
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="func">The function that is the provider.</param>
            <returns>new provider instance</returns>
        </member>
        <member name="T:System.Quad`4">
            <summary>
            Tuple class with 4 items (also called <em>Quadruple</em>)
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <typeparam name="T4">The type of the fourth item.</typeparam>
        </member>
        <member name="T:System.Tuple`4">
            <summary>
            Tuple class with 4 items (also called <em>Quadruple</em>)
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <typeparam name="T4">The type of the fourth item.</typeparam>
        </member>
        <member name="M:System.Tuple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Tuple`4"/> class.
            </summary>
            <param name="first">The first item.</param>
            <param name="second">The second item.</param>
            <param name="third">The third item.</param>
            <param name="fourth">The fourth item.</param>
        </member>
        <member name="M:System.Tuple`4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Tuple`4"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Tuple`4"/>.
            </returns>
        </member>
        <member name="M:System.Tuple`4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Tuple`4"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Tuple`4"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Tuple`4"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Tuple`4.Equals(System.Tuple{`0,`1,`2,`3})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="obj" /> parameter; otherwise, false.
            </returns>
            <param name="obj">
            An object to compare with this object.
            </param>
        </member>
        <member name="M:System.Tuple`4.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Tuple`4"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Tuple`4.op_Equality(System.Tuple{`0,`1,`2,`3},System.Tuple{`0,`1,`2,`3})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Tuple`4.op_Inequality(System.Tuple{`0,`1,`2,`3},System.Tuple{`0,`1,`2,`3})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:System.Tuple`4.Item1">
            <summary>
            Gets or sets the item1.
            </summary>
            <value>The item1.</value>
        </member>
        <member name="P:System.Tuple`4.Item2">
            <summary>
            Gets or sets the item2.
            </summary>
            <value>The item2.</value>
        </member>
        <member name="P:System.Tuple`4.Item3">
            <summary>
            Gets or sets the item3.
            </summary>
            <value>The item3.</value>
        </member>
        <member name="P:System.Tuple`4.Item4">
            <summary>
            Gets or sets the item4.
            </summary>
            <value>The item4.</value>
        </member>
        <member name="M:System.Quad`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Quad`4"/> class.
            </summary>
            <param name="first">The first item.</param>
            <param name="second">The second item.</param>
            <param name="third">The third item.</param>
            <param name="fourth">The fourth item.</param>
        </member>
        <member name="T:System.Rand">
            <summary>
            Helper class that allows to implement non-deterministic 
            reproducible testing.
            </summary>
            <remarks>
            Keep in mind, that this implementation is not thread-safe.
            </remarks>
        </member>
        <member name="M:System.Rand.ResetToDefault">
            <summary>
            Resets everything to the default.
            </summary>
        </member>
        <member name="M:System.Rand.Reset">
            <summary>
            Resets the random generator, using the provided activator
            </summary>
        </member>
        <member name="M:System.Rand.Reset(System.Func{System.Func{System.Int32,System.Int32}})">
            <summary>
            Overrides with the current activator
            </summary>
            <param name="activator">The activator.</param>
        </member>
        <member name="M:System.Rand.Next">
            <summary>
            Generates random value between 0 and <see cref="F:System.Int32.MaxValue"/> (exclusive)
            </summary>
            <returns>random integer</returns>
        </member>
        <member name="M:System.Rand.Next(System.Int32)">
            <summary>
            Generates random value between 0 and <paramref name="upperBound"/> (exclusive)
            </summary>
            <param name="upperBound">The upper bound.</param>
            <returns>random integer</returns>
        </member>
        <member name="M:System.Rand.Next(System.Int32,System.Int32)">
            <summary>
            Generates random value between <paramref name="lowerBound"/>
            and <paramref name="upperBound"/> (exclusive)
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <returns>random integer</returns>
        </member>
        <member name="M:System.Rand.NextItem``1(``0[])">
            <summary> Picks random item from the provided array </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="items">The items.</param>
            <returns>random item from the array</returns>
        </member>
        <member name="M:System.Rand.NextEnum``1">
            <summary> Picks random <see cref="T:System.Enum"/> </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <returns>random Enum value</returns>
        </member>
        <member name="M:System.Rand.NextDouble">
            <summary> Returns random double value with lowered precision </summary>
            <returns></returns>
        </member>
        <member name="M:System.Rand.NextString(System.Int32,System.Int32)">
            <summary>
            Generates random string with the length between 
            <paramref name="lowerBound"/> and <paramref name="upperBound"/> (exclusive)
            </summary>
            <param name="lowerBound">The lower bound for the string length.</param>
            <param name="upperBound">The upper bound for the string length.</param>
            <returns>new random string</returns>
        </member>
        <member name="T:System.Range">
            <summary>
            Helper class with shortcut methods for managing enumerations.
            Useful for inlining object generation in tests
            </summary>
        </member>
        <member name="M:System.Range.Create(System.Int32)">
            <summary>
            Same as <see cref="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)"/>
            </summary>
            <param name="count">Number of items to create</param>
            <returns>enumerable</returns>
        </member>
        <member name="M:System.Range.Create``1(System.Func{System.Int32,``0})">
            <summary>
            Creates the generator to iterate from 1 to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <typeparam name="T">type of the item to generate</typeparam>
            <param name="generator">The generator.</param>
            <returns>new enumerator</returns>
        </member>
        <member name="M:System.Range.Create``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Creates the enumerable using the provided generator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="count">The count.</param>
            <param name="generator">The generator.</param>
            <returns>enumerable instance</returns>
        </member>
        <member name="M:System.Range.Create``1(System.Int32,System.Func{``0})">
            <summary>
            Creates the enumerable using the provided generator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="count">The count.</param>
            <param name="generator">The generator.</param>
            <returns>enumerable instance</returns>
        </member>
        <member name="M:System.Range.Array``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Creates the array populated with the provided generator
            </summary>
            <typeparam name="T"></typeparam>
            <param name="count">The count.</param>
            <param name="generator">The generator.</param>
            <returns>array</returns>
        </member>
        <member name="M:System.Range.Array(System.Int32)">
            <summary>
            Creates the array of integers
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="T:System.ResolutionException">
            <summary>
            Exception that is thrown by <see cref="T:System.IResolver"/> or <see cref="T:System.IProvider`2"/>
            </summary>
        </member>
        <member name="M:System.ResolutionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ResolutionException"/> class.
            </summary>
        </member>
        <member name="M:System.ResolutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ResolutionException"/> class.
            </summary>
            <param name="message">The message related to this exception.</param>
        </member>
        <member name="M:System.ResolutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ResolutionException"/> class.
            </summary>
            <param name="message">The message related to this exception.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:System.ResolutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ResolutionException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:System.Resolver">
            <summary>
            Implementation of the <see cref="T:System.IResolver"/> that uses delegates
            to wire up the resolution logics and wraps all exceptions with the
            <see cref="T:System.ResolutionException"/>
            </summary>
        </member>
        <member name="M:System.Resolver.#ctor(System.Func{System.Type,System.Object},System.Func{System.Type,System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Resolver"/> class.
            </summary>
            <param name="resolver">The resolver.</param>
            <param name="namedResolver">The named resolver.</param>
        </member>
        <member name="M:System.Resolver.Get``1">
            <summary>
            Resolves this instance.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>
            requested instance of <typeparamref name="TService"/>
            </returns>
            <exception cref="T:System.ResolutionException">if there is some resolution problem</exception>
        </member>
        <member name="M:System.Resolver.Get``1(System.String)">
            <summary>
            Resolves the specified service type.
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="name">The name.</param>
            <returns>
            requested instance of <typeparamref name="TService"/>
            </returns>
            <exception cref="T:System.ResolutionException">if there is resolution problem</exception>
        </member>
        <member name="T:System.ResourceUtil`1">
            <summary>
            Simple helper class to replace common "DataMother" helper
            used in tests.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.ResourceUtil`1.GetStream(System.String)">
            <summary>
            Gets the stream for the associated resource from the <typeparamref name="T"/>
            namespace.
            </summary>
            <seealso cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)"/>
            <param name="name">The name of the resource.</param>
            <returns></returns>
        </member>
        <member name="T:System.Data.SqlClient.SqlServerGuidComparer">
            <summary>
            This class compares two guids according to the SQL server ordering rules.
            </summary>
        </member>
        <member name="F:System.Data.SqlClient.SqlServerGuidComparer.Instance">
            <summary>
            Singleton instance of the <see cref="T:System.Data.SqlClient.SqlServerGuidComparer"/>
            </summary>
        </member>
        <member name="M:System.Data.SqlClient.SqlServerGuidComparer.Compare(System.Guid,System.Guid)">
            <summary>
            Compares two guids and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first guid to compare.</param>
            <param name="y">The second guid to compare.</param>
            <returns>
            Value indicating relation between x and y
            </returns>
        </member>
        <member name="T:System.Result`1">
            <summary>
            Helper class that allows to pass out method call results without using exceptions
            </summary>
            <typeparam name="T">type of the associated data</typeparam>
        </member>
        <member name="M:System.Result`1.Error(System.String)">
            <summary> Creates failure result </summary>
            <param name="errorMessage">error message</param>
            <returns>result that is a failure</returns>
        </member>
        <member name="M:System.Result`1.Error``1(System.String,System.Object[])">
            <summary>  Creates failure result </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="errorFormatString">format string for the error message</param>
            <param name="args">The arguments.</param>
            <returns>result that is a failure</returns>
            <seealso cref="M:System.Result`1.Error(System.String)"/>
        </member>
        <member name="M:System.Result`1.Success(`0)">
            <summary> Creates success result </summary>
            <param name="value">item associated with the success result</param>
            <returns>result that is a success</returns>
        </member>
        <member name="P:System.Result`1.IsSuccess">
            <summary>
            Gets a value indicating whether this result is valid.
            </summary>
            <value><c>true</c> if this result is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Result`1.Value">
            <summary>
            item associated with this result
            </summary>
        </member>
        <member name="P:System.Result`1.ErrorMessage">
            <summary>
            Error message associated with this failure
            </summary>
        </member>
        <member name="T:System.Result">
            <summary> Helper class for creating <see cref="T:System.Result`1"/> instances </summary>
        </member>
        <member name="M:System.Result.Success``1(``0)">
            <summary> Creates success result </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="item">The item.</param>
            <returns>new result instance</returns>
            <seealso cref="M:System.Result`1.Success(`0)"/>
        </member>
        <member name="T:System.Rules.DoubleIs">
            <summary>
            Rules for the <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="M:System.Rules.DoubleIs.Valid(System.Double,System.Rules.IScope)">
            <summary>
            Checks if the specified double is valid.
            </summary>
            <param name="value">The value.</param>
            <param name="scope">The scope.</param>
        </member>
        <member name="T:System.Rules.EnforceArgumentScope">
            <summary>
            <see cref="T:System.Rules.IScope"/> that fails fast. It throws exception on first problem. 
            </summary>
            <remarks>
            This scope is useful for running validation checks on the server side. Exceptions looks like:
            <code>
            System.ArgumentException: String can not be empty
            Parameter name: visitor.Name
            </code>
            </remarks>
        </member>
        <member name="T:System.Rules.IScope">
            <summary>
            Concept from the xLim2. That's simple nesting logger that is used by
            the validation rules. 
            </summary>
            <remarks>
            <para>It has logical the extensibility (not implemented, because there
            does not seem to be any need) for maintaining the error level in
            attached and detached scopes. Warnings, Fatals or Info messages
            could be added here (full ILogScope if needed).</para>
            <para>  Same extensibility
            could be turned on for capturing detailed validation info on complex
            long-running validation scenarios (you'd hate to debug these). </para>
            <para> Note, that in order to maintain .NET 2.0 compatibility,
            is is recommended to use interface-declared methods instead of the
            extensions (or use some extension weaver).</para>
            </remarks>
        </member>
        <member name="M:System.Rules.IScope.Create(System.String)">
            <summary>
            Creates the nested scope with the specified name.
            </summary>
            <param name="name">New name for the nested scope.</param>
            <returns>Nested (and linked) scope instance</returns>
        </member>
        <member name="M:System.Rules.IScope.Write(System.Rules.RuleLevel,System.String)">
            <summary>
            Writes <paramref name="message"/> with the specified
            <paramref name="level"/> to the <see cref="T:System.Rules.IScope"/>
            </summary>
            <param name="level">The level.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:System.Rules.IScope.Level">
            <summary>
            Gets the current <see cref="T:System.Rules.RuleLevel"/> of this scope
            </summary>
            <value>The level.</value>
        </member>
        <member name="T:System.Rules.EnforceScope">
            <summary>
            <see cref="T:System.Rules.IScope"/> that fails fast. It throws exception on first problem. 
            </summary>
        </member>
        <member name="M:System.Rules.EnforceScope.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Rules.EnforceScope"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="T:System.Rules.RuleMessages">
            <summary>
            Collection of messages with the associated highest level
            </summary>
        </member>
        <member name="P:System.Rules.RuleMessages.Level">
            <summary>
            The highest level within the collection
            </summary>
            <value>The level.</value>
        </member>
        <member name="T:System.Rules.Rule`1">
            <summary>
             Typed delegate for holding the validation logics
            </summary>
            <param name="obj">Object to validate</param>
            <param name="scope">Scope that will hold all validation results</param>
            <typeparam name="T">type of the item to validate</typeparam>
        </member>
        <member name="T:System.Rules.RuleException">
            <summary>
            Exception that is thrown when some validation error is encountered
            </summary>
            <remarks>
            TODO: add proper implementation
            </remarks>
        </member>
        <member name="M:System.Rules.RuleException.#ctor(System.String)">
            <summary> Initializes a new instance of the <see cref="T:System.Rules.RuleException"/> class. </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:System.Rules.RuleException.#ctor(System.Collections.Generic.IEnumerable{System.Rules.RuleMessage})">
            <summary> Initializes a new instance of the <see cref="T:System.Rules.RuleException"/> class. </summary>
            <param name="messages">The messages.</param>
        </member>
        <member name="M:System.Rules.RuleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Rules.RuleException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:System.Rules.DateIs">
            <summary> Rules for the <see cref="T:System.DateTime"/> </summary>
        </member>
        <member name="M:System.Rules.DateIs.SqlCompatible(System.DateTime,System.Rules.IScope)">
            <summary>
            Verifies that it is ok to send this date directly into the MS SQL DB
            </summary>
            <param name="dateTime">The dateTime to validate.</param>
            <param name="scope">validation scope</param>
        </member>
        <member name="T:System.Rules.Is">
            <summary>
            Generic rules 
            </summary>
        </member>
        <member name="M:System.Rules.Is.NotEqual``1(System.IEquatable{``0})">
            <summary>
            Composes the validator ensuring that the provided value does not equal to <paramref name="item"/>
            </summary>
            <typeparam name="T">type of the item to compare</typeparam>
            <param name="item">The item.</param>
            <returns>new rule instance</returns>
        </member>
        <member name="M:System.Rules.Is.Equal``1(System.IEquatable{``0})">
            <summary>
            Composes the validator ensuring that the provided value equals to <paramref name="item"/>
            </summary>
            <typeparam name="T">type of the item to compare</typeparam>
            <param name="item">The item.</param>
            <returns>new rule instance</returns>
        </member>
        <member name="M:System.Rules.Is.SameAs``1(``0)">
            <summary>
            Composes the validator ensuring that the provided object is same as <paramref name="item"/>
            </summary>
            <typeparam name="T">type of the item to compare</typeparam>
            <param name="item">The item.</param>
            <returns>new rule instance</returns>
        </member>
        <member name="M:System.Rules.Is.NotDefault``1(``0,System.Rules.IScope)">
            <summary>
            Returns error if provided value type has default value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item.</param>
            <param name="scope">The scope.</param>
        </member>
        <member name="M:System.Rules.Is.Default``1(``0,System.Rules.IScope)">
            <summary>
            Returns error if provided value type has been initialized
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item.</param>
            <param name="scope">The scope.</param>
        </member>
        <member name="M:System.Rules.Is.Within``1(System.IComparable{``0},System.IComparable{``0})">
            <summary>
            Composes the range validator that ensures that the supplied value belongs
            to the interval from <paramref name="minValue"/> to <paramref name="maxValue"/>
            (inclusive).
            </summary>
            <typeparam name="T">type of the item to validate</typeparam>
            <param name="minValue">The min value.</param>
            <param name="maxValue">The max value.</param>
            <returns>new validator instance</returns>
        </member>
        <member name="M:System.Rules.Is.Between``1(System.IComparable{``0},System.IComparable{``0})">
            <summary>
            Composes the range validator that ensures that the supplied value belongs
            to the interval between <paramref name="lowerBound"/> and <paramref name="upperBound"/>
            (exclusive)
            </summary>
            <typeparam name="T">type of the item to validate</typeparam>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <returns>new rule instance</returns>
        </member>
        <member name="M:System.Rules.Is.GreaterThan``1(System.IComparable{``0})">
            <summary>
            Creates the rule to ensure that the validated value is greater than
            the specified <paramref name="comparable"/>
            </summary>
            <typeparam name="T">type of the item to run rule against</typeparam>
            <param name="comparable">The comparable.</param>
            <returns>new rule instance</returns>
        </member>
        <member name="M:System.Rules.Is.AtLeast``1(System.IComparable{``0})">
            <summary>
            Creates the rule to ensure that the validated value is greater than
            or equal to the specified <paramref name="comparable"/>
            </summary>
            <typeparam name="T">type of the item to run rule against</typeparam>
            <param name="comparable">The comparable.</param>
            <returns>new rule instance</returns>
        </member>
        <member name="M:System.Rules.Is.AtMost``1(System.IComparable{``0})">
            <summary>
            Creates the rule to ensure that the validated value is less than
            or equal to the specified <paramref name="comparable"/>
            </summary>
            <typeparam name="T">type of the item to run rule against</typeparam>
            <param name="comparable">The comparable.</param>
            <returns>new rule instance</returns>
        </member>
        <member name="M:System.Rules.Is.LessThan``1(System.IComparable{``0})">
            <summary>
            Creates the rule to ensure that the validated value is less than
            the specified <paramref name="comparable"/>
            </summary>
            <typeparam name="T">type of the item to run rule against</typeparam>
            <param name="comparable">The comparable.</param>
            <returns>new rule instance</returns>
        </member>
        <member name="T:System.Rules.RuleLevel">
            <summary>
            Levels leveraged by the <see cref="T:System.Rules.Rule`1"/> implementations
            </summary>
        </member>
        <member name="F:System.Rules.RuleLevel.None">
            <summary> Default value for the purposes of good citizenship </summary>
        </member>
        <member name="F:System.Rules.RuleLevel.Warn">
            <summary> The rule raises a warning </summary>
        </member>
        <member name="F:System.Rules.RuleLevel.Error">
            <summary> The rule raises an error </summary>
        </member>
        <member name="T:System.Rules.RuleMessage">
            <summary> Rule message </summary>
        </member>
        <member name="M:System.Rules.RuleMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:System.Rules.RuleMessage.Path">
            <summary>
            Gets the object path for the current message.
            </summary>
            <value>The path object path.</value>
        </member>
        <member name="P:System.Rules.RuleMessage.Level">
            <summary>
            Gets the <see cref="T:System.Rules.RuleLevel"/> associated with this message.
            </summary>
            <value>The level.</value>
        </member>
        <member name="P:System.Rules.RuleMessage.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:System.Rules.StringIs">
            <summary>
            Common string rules
            </summary>
        </member>
        <member name="F:System.Rules.StringIs._emailRegex">
            <summary>
            Originally http://fightingforalostcause.net/misc/2006/compare-email-regex.php,
            but modified to have less negative results 
            </summary>
        </member>
        <member name="M:System.Rules.StringIs.ValidEmail(System.String,System.Rules.IScope)">
            <summary>
            Determines whether the string is valid email address
            </summary>
            <param name="email">string to validate</param>
            <param name="scope">validation scope.</param>
        </member>
        <member name="M:System.Rules.StringIs.Limited(System.Int32,System.Int32)">
            <summary>
            Composes the string validator ensuring string length is within the supplied rangs
            </summary>
            <param name="minLength">Min string length.</param>
            <param name="maxLength">Max string length.</param>
            <returns>new validator instance</returns>
        </member>
        <member name="M:System.Rules.StringIs.Limited(System.Int32)">
            <summary>
            Composes the string validator ensuring string length is shorter than
            <paramref name="maxLength"/>
            </summary>
            <param name="maxLength">Max string length.</param>
            <returns>new validator instance</returns>
        </member>
        <member name="F:System.Rules.StringIs.NotEmpty">
            <summary>
            Reports error if the associated string is empty
            </summary>
        </member>
        <member name="M:System.Rules.StringIs.Without(System.Char[])">
            <summary>
            String validator that ensures absence of any illegal characters
            </summary>
            <param name="illegalCharacters">The illegal characters.</param>
            <returns>new validator instance</returns>
        </member>
        <member name="T:System.Rules.Scope">
            <summary>
            Helper class that invokes different scopes
            </summary>
        </member>
        <member name="F:System.Rules.Scope.ForValidation">
            <summary>
            Named provider for the <see cref="T:System.Rules.ValidationScope"/>
            </summary>
        </member>
        <member name="F:System.Rules.Scope.ForEnforce">
            <summary>
            Named provider for the <see cref="T:System.Rules.EnforceScope"/>
            </summary>
        </member>
        <member name="F:System.Rules.Scope.ForEnforceArgument">
            <summary>
            Named provider for the <see cref="T:System.Rules.EnforceArgumentScope"/>
            </summary>
        </member>
        <member name="M:System.Rules.Scope.IsError``1(``0,System.Rules.Rule{``0}[])">
            <summary>  Determines whether the specified item has problems of 
            <see cref="F:System.Rules.RuleLevel.Error"/> or higher.  </summary>
            <typeparam name="TItem">type of the item to run rules against</typeparam>
            <param name="item">The item to run rules against.</param>
            <param name="rules">The rules to execute.</param>
            <returns>
            	<c>true</c> if the specified item is in error state; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Rules.Scope.IsValid``1(``0,System.Rules.Rule{``0}[])">
            <summary>  Determines whether the specified item does not have any problems </summary>
            <typeparam name="TItem">type of the item to run rules against</typeparam>
            <param name="item">The item to run rules against.</param>
            <param name="rules">The rules to execute.</param>
            <returns>
            	<c>true</c> if the specified item is in error state; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Rules.Scope.IsWarn``1(``0,System.Rules.Rule{``0}[])">
            <summary>  Determines whether the specified item has problems of 
            <see cref="F:System.Rules.RuleLevel.Warn"/> or higher.  </summary>
            <typeparam name="TItem">type of the item to run rules against</typeparam>
            <param name="item">The item to run rules against.</param>
            <param name="rules">The rules to execute.</param>
            <returns>
            	<c>true</c> if the specified item is in warning state; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Rules.Scope.GetMessages``1(``0,System.String,System.Rules.Rule{``0}[])">
            <summary> Collects all rule messages associated with the 
            specified <paramref name="item"/> </summary>
            <typeparam name="TItem">The type of the item to run the rules against.</typeparam>
            <param name="item">The item to run the rules against.</param>
            <param name="name">The name of the scope.</param>
            <param name="rules">The rules to execute.</param>
            <returns>read-only collection of <see cref="T:System.Rules.RuleMessage"/></returns>
        </member>
        <member name="M:System.Rules.Scope.Validate``1(``0,System.Rules.Rule{``0}[])">
            <summary>
            Runs full validation scan of the specified item and throws error
            if the level is not <see cref="F:System.Rules.RuleLevel.None"/>
            </summary>
            <typeparam name="T">type of the item to validate</typeparam>
            <param name="item">The item to validate.</param>
            <param name="rules">The rules.</param>
            <exception cref="T:System.Rules.RuleException">if any rules have failed</exception>
        </member>
        <member name="M:System.Rules.Scope.ValidateMany``1(System.Collections.Generic.IEnumerable{``0},System.Rules.Rule{``0}[])">
            <summary>
            Runs full validation scan of the specified collection
            </summary>
            <typeparam name="T">type of the item to validate</typeparam>
            <param name="items">The collection to validate.</param>
            <param name="rules">The validators.</param>
            <exception cref="T:System.Rules.RuleException">if any rules have failed</exception>
        </member>
        <member name="T:System.IScopeExtensions">
            <summary> /// <para>Extensions that encapsulate some repetitive tasks
             of setting scopes, and calling validation rules.</para>
             <para>Basically that's the class that links together scope 
             and validation logics.</para></summary>
        </member>
        <member name="M:System.IScopeExtensions.Error(System.Rules.IScope,System.String,System.Object[])">
            <summary> Outputs formatted <see cref="F:System.Rules.RuleLevel.Error"/> 
            message into the  <paramref name="scope"/> using the 
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message (see <see cref="M:System.String.Format(System.String,System.Object)"/>).</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:System.IScopeExtensions.Error(System.Rules.IScope,System.String)">
            <summary> Outputs <see cref="F:System.Rules.RuleLevel.Error"/> 
            message into the  <paramref name="scope"/> </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:System.IScopeExtensions.Warn(System.Rules.IScope,System.String,System.Object[])">
            <summary> Outputs formatted <see cref="F:System.Rules.RuleLevel.Warn"/> 
            message into the  <paramref name="scope"/> using the 
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message (see <see cref="M:System.String.Format(System.String,System.Object)"/>).</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:System.IScopeExtensions.Warn(System.Rules.IScope,System.String)">
            <summary> Outputs <see cref="F:System.Rules.RuleLevel.Warn"/> 
            message into the  <paramref name="scope"/> </summary>
            <param name="scope">The scope.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:System.IScopeExtensions.IsError(System.Rules.IScope)">
            <summary> Determines whether the specified <paramref name="scope"/>
            is in the <see cref="F:System.Rules.RuleLevel.Error"/> state. </summary>
            <param name="scope">The scope.</param>
            <returns>
            	<c>true</c> if the specified scope is in <see cref="F:System.Rules.RuleLevel.Error"/> 
            state; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.IScopeExtensions.IsNone(System.Rules.IScope)">
            <summary> Determines whether the specified <paramref name="scope"/>
            is in the <see cref="F:System.Rules.RuleLevel.None"/> state. </summary>
            <param name="scope">The scope.</param>
            <returns>
            	<c>true</c> if the specified scope is in <see cref="F:System.Rules.RuleLevel.None"/> 
            state; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.IScopeExtensions.IsWarn(System.Rules.IScope)">
            <summary> Determines whether the specified <paramref name="scope"/>
            is in the <see cref="F:System.Rules.RuleLevel.Warn"/> state. </summary>
            <param name="scope">The scope.</param>
            <returns>
            	<c>true</c> if the specified scope is in <see cref="F:System.Rules.RuleLevel.Warn"/> 
            state; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.IScopeExtensions.Validate``1(System.INamedProvider{System.Rules.IScope},``0,System.String,System.Rules.Rule{``0}[])">
            <summary>
            Validates some member using the <paramref name="scopeProvider"/>.
            </summary>
            <typeparam name="T">type of the item to validate</typeparam>
            <param name="scopeProvider">The scope provider.</param>
            <param name="item">The item to validate.</param>
            <param name="name">The name of the variable that holds item to validate.</param>
            <param name="rules">The rules to run.</param>
        </member>
        <member name="M:System.IScopeExtensions.Validate``1(System.Rules.IScope,``0,System.String,System.Rules.Rule{``0}[])">
            <summary> Validates some member using the provided <paramref name="parentScope"/>.
            </summary>
            <typeparam name="T">type of the item to validate</typeparam>
            <param name="parentScope">The parent scope.</param>
            <param name="item">The item to validate.</param>
            <param name="name">The name of the variable that holds item to validate.</param>
            <param name="rules">The rules to run.</param>
        </member>
        <member name="M:System.IScopeExtensions.Validate``1(System.Rules.IScope,System.Func{``0},System.Rules.Rule{``0}[])">
            <summary>
            Validates some member using the provided <paramref name="parentScope"/>.
            </summary>
            <typeparam name="T">type of the item to validate</typeparam>
            <param name="parentScope">The parent scope.</param>
            <param name="property">The property reference.</param>
            <param name="rules">The rules to run.</param>
        </member>
        <member name="M:System.IScopeExtensions.ValidateMany``1(System.Rules.IScope,System.Collections.Generic.IEnumerable{``0},System.String,System.Rules.Rule{``0}[])">
            <summary>
            Validates some <see cref="T:System.Collections.Generic.IEnumerable`1"/> member using the provided <paramref name="parentScope"/>.
            </summary>
            <typeparam name="T">type of the item to validate</typeparam>
            <param name="parentScope">The parent scope.</param>
            <param name="items">The collection to validate.</param>
            <param name="name">The name of the variable that holds item to validate.</param>
            <param name="rules">The rules to run.</param>
        </member>
        <member name="M:System.IScopeExtensions.ValidateMany``1(System.Rules.IScope,System.Collections.Generic.ICollection{``0},System.String,System.Int32,System.Rules.Rule{``0}[])">
            <summary>
            Validates some <see cref="T:System.Collections.Generic.IEnumerable`1"/> member using the provided <paramref name="parentScope"/>.
            </summary>
            <typeparam name="T">type of the item to validate</typeparam>
            <param name="parentScope">The parent scope.</param>
            <param name="items">The collection to validate.</param>
            <param name="name">The name of the variable that holds item to validate.</param>
            <param name="limit">The limit (if collection is bigger, then validation will not continue).</param>
            <param name="rules">The rules to run.</param>
        </member>
        <member name="M:System.IScopeExtensions.ValidateInScope``1(System.Rules.IScope,``0,System.Rules.Rule{``0}[])">
            <summary>
            Runs the specified rules against the provided object in the current scope
            </summary>
            <typeparam name="T">type of the object being validated</typeparam>
            <param name="scope">The scope.</param>
            <param name="item">The item to validate.</param>
            <param name="rules">The rules to execute.</param>
        </member>
        <member name="M:System.IScopeExtensions.ValidateInScope``1(System.Rules.IScope,System.Collections.Generic.IEnumerable{``0},System.Rules.Rule{``0}[])">
            <summary>
            Runs validation rules against some some <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">type of the items being validated</typeparam>
            <param name="parentScope">The parent scope.</param>
            <param name="items">Collection of the items to validate</param>
            <param name="rules">The rules to run.</param>
        </member>
        <member name="T:System.Rules.TrackScope">
            <summary>
            <see cref="T:System.Rules.IScope"/> that fails fast. It throws exception on first problem. 
            </summary>
        </member>
        <member name="T:System.Rules.ValidationScope">
            <summary>
            <see cref="T:System.Rules.IScope"/> that collects all errors before throwing exception.
            </summary>
            <remarks>
            <para>This scope is useful for running validation checks on the client side 
            (or in integration scenarios, where running some operation after the 
            validation is an expensive operation). </para>
            <para>Exceptions looks like:</para>
            <code>
            System.ArgumentException: 
            SomeMethod().visitor.Name - String can not be empty
            SomeMethod().visitor.Programs.[0].Name - Object of type 'String' cannot be null
            SomeMethod().visitor.Programs.[0].Name - Object of type 'String' cannot be null
            SomeMethod().visitor.Programs.[1] - Object of type 'Program' cannot be null
            SomeMethod().visitor.Programs.[2] - Program must be active
            SomeMethod().visitor.Programs.[2].Name - Can not contain '-'
            SomeMethod().visitorName - Object of type 'String' cannot be null
            Parameter name: SomeMethod()
            </code>
            </remarks>
        </member>
        <member name="M:System.Rules.ValidationScope.#ctor(System.String,System.Rules.RuleLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Rules.ValidationScope"/>
            class. It will raise exception whenever <paramref name="failureLevel"/>
            or higher message is written.
            </summary>
            <param name="name">The name for the scope.</param>
            <param name="failureLevel">The failure level.</param>
        </member>
        <member name="M:System.Rules.ValidationScope.System#IDisposable#Dispose">
            <summary>
            Throws the exception for the root scope (if it has any problems)
            </summary>
            <exception cref="T:System.Rules.RuleException">If the root scope has any problems</exception>
        </member>
        <member name="T:System.StringUtil">
            <summary>
            Helper methods for <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:System.StringUtil.FormatInvariant(System.String,System.Object[])">
            <summary>
            Formats the string using InvariantCulture
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
            <returns>formatted string</returns>
        </member>
        <member name="M:System.StringUtil.MemberNameToCaption(System.String)">
            <summary>
            Converts "Class.SomeName" to "Class - Some Name"
            </summary>
        </member>
        <member name="T:System.Syntax`1">
            <summary>
            Helper class for creating fluent APIs
            </summary>
            <typeparam name="T">underlying type</typeparam>
        </member>
        <member name="T:System.Syntax">
            <summary>
            Helper class for creating fluent APIs, that hides unused signatures
            </summary>
        </member>
        <member name="M:System.Syntax.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:System.Syntax.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Syntax.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:System.Syntax.GetType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the current instance.
            </summary>
            <returns>
            The <see cref="T:System.Type"/> instance that represents the exact runtime type of the current instance.
            </returns>
        </member>
        <member name="M:System.Syntax`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Syntax`1"/> class.
            </summary>
            <param name="inner">The underlying instance.</param>
        </member>
        <member name="P:System.Syntax`1.Target">
            <summary>
            Gets the underlying object.
            </summary>
            <value>The underlying object.</value>
        </member>
        <member name="T:System.Threading.ReaderWriterLockSlimExtensions">
            <summary>
            Helper class that simplifies <see cref="T:System.Threading.ReaderWriterLockSlim"/> usage
            </summary>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlimExtensions.GetReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Gets the read lock object, that is released when the object is disposed.
            </summary>
            <param name="slimLock">The slim lock object.</param>
            <returns></returns>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlimExtensions.GetWriteLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Gets the write lock, that is released when the object is disposed.
            </summary>
            <param name="slimLock">The slim lock.</param>
            <returns></returns>
        </member>
        <member name="M:System.Threading.ReaderWriterLockSlimExtensions.GetUpgradeableReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Gets the upgradeable read lock, that is released, when the object is disposed
            </summary>
            <param name="slimLock">The slim lock.</param>
            <returns></returns>
        </member>
        <member name="T:System.RevisionAttribute">
            <summary>
            Attribute used for embedding file-specific version info into the code.
            Subversion supports it.
            </summary>
        </member>
        <member name="M:System.RevisionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.RevisionAttribute"/> class.
            </summary>
            <param name="revision">The revision.</param>
        </member>
        <member name="P:System.RevisionAttribute.Revision">
            <summary>
            Gets the revision string.
            </summary>
            <value>The revision.</value>
            <example>$Revision: 7 $</example>
        </member>
        <member name="P:System.RevisionAttribute.File">
            <summary>
            Gets or sets the file string.
            </summary>
            <value>The file.</value>
            <example>$Id: VersionControlAttribute.cs 7 2007-03-11 12:11:59Z RAbdullin $</example>
        </member>
        <member name="T:System.Pair`2">
            <summary>
            Tuple class with 2 items
            </summary>
            <typeparam name="TKey">The type of the first item.</typeparam>
            <typeparam name="TValue">The type of the second item.</typeparam>
        </member>
        <member name="T:System.Tuple`2">
            <summary>
            Tuple class with 2 items
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
        </member>
        <member name="M:System.Tuple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Pair`2"/> class.
            </summary>
            <param name="first">The first item.</param>
            <param name="second">The second item.</param>
        </member>
        <member name="M:System.Tuple`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Pair`2"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Pair`2"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Pair`2"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Tuple`2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Pair`2"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Pair`2"/>.
            </returns>
        </member>
        <member name="M:System.Tuple`2.Equals(System.Tuple{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="obj" /> parameter; otherwise, false.
            </returns>
            <param name="obj">
            An object to compare with this object.
            </param>
        </member>
        <member name="M:System.Tuple`2.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Tuple`2.op_Equality(System.Tuple{`0,`1},System.Tuple{`0,`1})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Tuple`2.op_Inequality(System.Tuple{`0,`1},System.Tuple{`0,`1})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:System.Tuple`2.Item1">
            <summary>
            Gets Item1.
            </summary>
            <value>The item1.</value>
        </member>
        <member name="P:System.Tuple`2.Item2">
            <summary>
            Gets Item2.
            </summary>
            <value>The item2.</value>
        </member>
        <member name="M:System.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Pair`2"/> class.
            </summary>
            <param name="first">The first item.</param>
            <param name="second">The second item.</param>
        </member>
        <member name="P:System.Pair`2.Key">
            <summary>
            Gets the key (or Item1).
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:System.Pair`2.Value">
            <summary>
            Gets the value (or Item2).
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:System.Reflection.Reflect">
            <summary>
            Helper class for the IL-based strongly-typed reflection
            </summary>
        </member>
        <member name="M:System.Reflection.Reflect.Variable``1(System.Func{``0})">
            <summary>
            Retrieves information of the <b>local</b> variable passed in the expression.
            <code>
            var myVar = "string";
            var info = Reflect.Variable(() =&gt; myVar)
            </code>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression">The expression containing the local variable to reflect.</param>
            <returns>information about the variable</returns>
        </member>
        <member name="T:System.Triple`3">
            <summary>
            Tuple class with 3 items
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
        </member>
        <member name="T:System.Tuple`3">
            <summary>
            Tuple class with 3 items
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
        </member>
        <member name="M:System.Tuple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Triple`3"/> class.
            </summary>
            <param name="first">The first item.</param>
            <param name="second">The second item.</param>
            <param name="third">The third item.</param>
        </member>
        <member name="M:System.Tuple`3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Triple`3"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Triple`3"/>.
            </returns>
        </member>
        <member name="M:System.Tuple`3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Triple`3"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Triple`3"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Triple`3"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Tuple`3.Equals(System.Tuple{`0,`1,`2})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="obj" /> parameter; otherwise, false.
            </returns>
            <param name="obj">
            An object to compare with this object.
            </param>
        </member>
        <member name="M:System.Tuple`3.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Triple`3"/>.
            </returns>
        </member>
        <member name="M:System.Tuple`3.op_Equality(System.Tuple{`0,`1,`2},System.Tuple{`0,`1,`2})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Tuple`3.op_Inequality(System.Tuple{`0,`1,`2},System.Tuple{`0,`1,`2})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:System.Tuple`3.Item1">
            <summary>
            Gets Item1.
            </summary>
            <value>The item1.</value>
        </member>
        <member name="P:System.Tuple`3.Item2">
            <summary>
            Gets Item2.
            </summary>
            <value>The item2.</value>
        </member>
        <member name="P:System.Tuple`3.Item3">
            <summary>
            Gets Item3.
            </summary>
            <value>The item3.</value>
        </member>
        <member name="M:System.Triple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Triple`3"/> class.
            </summary>
            <param name="first">The first item.</param>
            <param name="second">The second item.</param>
            <param name="third">The third item.</param>
        </member>
        <member name="T:System.Tuple">
            <summary>
            Helper class that simplifies tuple inline generation
            </summary>
             <example>
            Tuple.From("Mike",1,true)
            </example>
        </member>
        <member name="M:System.Tuple.From``2(``0,``1)">
            <summary>
            Creates <see cref="T:System.Pair`2"/> out of two arguments
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <param name="first">The first item.</param>
            <param name="second">The second item.</param>
            <returns>New tuple instance</returns>
        </member>
        <member name="M:System.Tuple.From``3(``0,``1,``2)">
            <summary>
            Creates <see cref="T:System.Triple`3"/> out of the three arguments
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <param name="first">The first item.</param>
            <param name="second">The second item.</param>
            <param name="third">The third item.</param>
            <returns>New tuple instance</returns>
        </member>
        <member name="M:System.Tuple.From``4(``0,``1,``2,``3)">
            <summary>
            Creates <see cref="T:System.Tuple`4"/> out of four arguments
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <typeparam name="T4">The type of the fourth.</typeparam>
            <param name="first">The first item.</param>
            <param name="second">The second item.</param>
            <param name="third">The third item.</param>
            <param name="fourth">The fourth item.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:System.Tuple.From``5(``0,``1,``2,``3,``4)">
            <summary>
            Creates <see cref="T:System.Tuple`4"/> out of four arguments
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <typeparam name="T4">The type of the fourth item.</typeparam>
            <typeparam name="T5">The type of the fifth item.</typeparam>
            <param name="first">The first item.</param>
            <param name="second">The second item.</param>
            <param name="third">The third item.</param>
            <param name="fourth">The fourth item.</param>
            <param name="fifth">The fifth item.</param>
            <returns>New instance</returns>
        </member>
        <member name="M:System.Tuple.Append``3(System.Tuple{``0,``1},``2)">
            <summary>
            Appends the specified <paramref name="item"/> to the <paramref name="tuple"/>.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <param name="tuple">The tuple to append to.</param>
            <param name="item">The item to append.</param>
            <returns>New tuple instance</returns>
        </member>
        <member name="M:System.Tuple.Append``4(System.Tuple{``0,``1,``2},``3)">
            <summary>
            Appends the specified <paramref name="item"/> to the <paramref name="tuple"/>.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <typeparam name="T4">The type of the fourth item.</typeparam>
            <param name="tuple">The tuple to append to.</param>
            <param name="item">The item to append.</param>
            <returns>New tuple instance</returns>
        </member>
        <member name="M:System.Tuple.Append``5(System.Tuple{``0,``1,``2,``3},``4)">
            <summary>
            Appends the specified <paramref name="item"/> to the <paramref name="tuple"/>.
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <typeparam name="T4">The type of the fourth item.</typeparam>
            <typeparam name="T5">The type of the fifth item.</typeparam>
            <param name="tuple">The tuple to append to.</param>
            <param name="item">The item to append.</param>
            <returns>New tuple instance</returns>
        </member>
        <member name="M:System.Tuple.Add``2(System.Collections.Generic.ICollection{System.Tuple{``0,``1}},``0,``1)">
            <summary> Shortcut to create and add tuple to the collection </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <param name="collection">The collection to add to.</param>
            <param name="first">The first item.</param>
            <param name="second">The second item.</param>
        </member>
        <member name="M:System.Tuple.Add``3(System.Collections.Generic.ICollection{System.Tuple{``0,``1,``2}},``0,``1,``2)">
            <summary> Shortcut to create and add tuple to the collection </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <param name="collection">The collection to add to.</param>
            <param name="first">The first item.</param>
            <param name="second">The second item.</param>
            <param name="third">The third item.</param>
        </member>
        <member name="M:System.Tuple.Add``4(System.Collections.Generic.ICollection{System.Tuple{``0,``1,``2,``3}},``0,``1,``2,``3)">
            <summary> Shortcut to create and add tuple to the collection </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <typeparam name="T4">The type of the fourth item.</typeparam>
            <param name="collection">The collection to add to.</param>
            <param name="first">The first item.</param>
            <param name="second">The second item.</param>
            <param name="third">The third item.</param>
            <param name="fourth">The fourth item.</param>
        </member>
        <member name="M:System.Tuple.Add``5(System.Collections.Generic.ICollection{System.Tuple{``0,``1,``2,``3,``4}},``0,``1,``2,``3,``4)">
            <summary> Shortcut to create and add tuple to the collection </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <typeparam name="T4">The type of the fourth item.</typeparam>
            <typeparam name="T5">The type of the fifth item.</typeparam>
            <param name="collection">The collection to add to.</param>
            <param name="first">The first item.</param>
            <param name="second">The second item.</param>
            <param name="third">The third item.</param>
            <param name="fourth">The fourth item.</param>
            <param name="fifth">The fifth item.</param>
        </member>
        <member name="T:System.Tuple`5">
            <summary>
            Tuple class with 5 items (also called <em>Quintuple</em>)
            </summary>
            <typeparam name="T1">The type of the first item.</typeparam>
            <typeparam name="T2">The type of the second item.</typeparam>
            <typeparam name="T3">The type of the third item.</typeparam>
            <typeparam name="T4">The type of the fourth item.</typeparam>
            <typeparam name="T5">The type of the fifthi item.</typeparam>
        </member>
        <member name="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Tuple`4"/> class.
            </summary>
            <param name="first">The first item.</param>
            <param name="second">The second item.</param>
            <param name="third">The third item.</param>
            <param name="fourth">The fourth item.</param>
            <param name="fifth">The fifth item.</param>
        </member>
        <member name="M:System.Tuple`5.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Tuple`5"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Tuple`5"/>.
            </returns>
        </member>
        <member name="M:System.Tuple`5.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Tuple`5"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Tuple`5"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Tuple`5"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:System.Tuple`5.Equals(System.Tuple{`0,`1,`2,`3,`4})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="obj" /> parameter; otherwise, false.
            </returns>
            <param name="obj">
            An object to compare with this object.
            </param>
        </member>
        <member name="M:System.Tuple`5.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Tuple`5"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:System.Tuple`5.op_Equality(System.Tuple{`0,`1,`2,`3,`4},System.Tuple{`0,`1,`2,`3,`4})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:System.Tuple`5.op_Inequality(System.Tuple{`0,`1,`2,`3,`4},System.Tuple{`0,`1,`2,`3,`4})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:System.Tuple`5.Item1">
            <summary>
            Gets or sets the item1.
            </summary>
            <value>The item1.</value>
        </member>
        <member name="P:System.Tuple`5.Item2">
            <summary>
            Gets or sets the item2.
            </summary>
            <value>The item2.</value>
        </member>
        <member name="P:System.Tuple`5.Item3">
            <summary>
            Gets or sets the item3.
            </summary>
            <value>The item3.</value>
        </member>
        <member name="P:System.Tuple`5.Item4">
            <summary>
            Gets or sets the item4.
            </summary>
            <value>The item4.</value>
        </member>
        <member name="P:System.Tuple`5.Item5">
            <summary>
            Gets or sets the item5.
            </summary>
            <value>The item5.</value>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            Helper related to the <see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="M:System.TypeExtensions.GetAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
             Extension method to retrieve attributes from the type
            </summary>
            <param name="target">Type to perform operation upon</param>
            <param name="inherit"><see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)"/></param>
            <typeparam name="T">Attribute to use</typeparam>
            <returns>Empty array of <typeparamref name="T"/> if there are no attributes</returns>
        </member>
        <member name="M:System.TypeExtensions.GetAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
             <summary>
             Returns single attribute from the type
             </summary>
             <typeparam name="T">Attribute to use</typeparam>
             <param name="target">Attribute provider</param>
            <param name="inherit"><see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)"/></param>
             <returns><em>Null</em> if the attribute is not found</returns>
             <exception cref="T:System.InvalidOperationException">If there are 2 or more attributes</exception>
        </member>
        <member name="M:System.TypeExtensions.MarkedWith``1(System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            Selects non-abstract types marked with the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="types"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="T:System.Diagnostics.ExecutionCounterGroup">
            <summary>
            Helper class to simplify counter creation syntax
            </summary>
        </member>
        <member name="M:System.Diagnostics.ExecutionCounterGroup.Register">
            <summary>
            Registers the counters in the global cache
            </summary>
        </member>
        <member name="M:System.Diagnostics.ExecutionCounterGroup.CreateCounter(System.String,System.Int32,System.Int32)">
            <summary>
            Creates the counter and adds it to the internal collection.
            </summary>
            <param name="name">The name for the new counter.</param>
            <param name="openCounterCount">The open counter count.</param>
            <param name="closeCounterCount">The close counter count.</param>
            <returns>instance of the created counter</returns>
        </member>
        <member name="M:System.Diagnostics.ExecutionCounterGroup.CreateCounter(System.Linq.Expressions.Expression{System.Action},System.Int32,System.Int32)">
            <summary> Creates the counter and adds it to the internal collection. </summary>
            <param name="expression">The expression to derive counter name from.</param>
            <param name="openCounterCount">The open counter count.</param>
            <param name="closeCounterCount">The close counter count.</param>
            <returns>instance of the new counter</returns>
        </member>
        <member name="M:System.Diagnostics.ExecutionCounterGroup.CreateCounterForCtor``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Int32,System.Int32)">
            <summary> Creates the counter and adds it to the internal collection. </summary>
            <param name="expression">The expression to derive counter name from.</param>
            <param name="openCounterCount">The open counter count.</param>
            <param name="closeCounterCount">The close counter count.</param>
            <returns>instance of the new counter</returns>
        </member>
        <member name="T:System.Diagnostics.ExecutionCounterGroup`1">
            <summary>
            Helper class to simplify counter creation syntax
            </summary>
        </member>
        <member name="M:System.Diagnostics.ExecutionCounterGroup`1.CreateCounter(System.Linq.Expressions.Expression{System.Action{`0}},System.Int32,System.Int32)">
            <summary>
            Creates new counter and adds it to the internal collection
            </summary>
            <param name="call">The call to derive counter name from.</param>
            <param name="openCounterCount">The open counter count.</param>
            <param name="closeCounterCount">The close counter count.</param>
            <returns>instance of the created counter</returns>
        </member>
        <member name="T:System.Diagnostics.ExceptionCounters">
            <summary>
            Exception counter that persists unique information about exceptions being entered in an internal dictionary. 
            Once it gets filled, exceptions with the least number of occurences are discarded.
            </summary>
        </member>
        <member name="F:System.Diagnostics.ExceptionCounters.DefaultCapacity">
            <summary>
            Default capacity for the <see cref="T:System.Diagnostics.ExceptionCounters"/>
            </summary>
        </member>
        <member name="F:System.Diagnostics.ExceptionCounters.Default">
            <summary>
            Singleton instance of this counter
            </summary>
        </member>
        <member name="M:System.Diagnostics.ExceptionCounters.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.ExceptionCounters"/> class.
            </summary>
            <param name="exceptionThreshold">Maximum number of unique exceptions to keep at once.</param>
        </member>
        <member name="M:System.Diagnostics.ExceptionCounters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.ExceptionCounters"/> class with the <see cref="F:System.Diagnostics.ExceptionCounters.DefaultCapacity"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.ExceptionCounters.Add(System.Exception)">
            <summary>
            Registers the provided exception in this counter
            </summary>
            <param name="ex">The exception to register</param>
            <returns></returns>
            <rereturns>unique identifier for the exception</rereturns>
        </member>
        <member name="M:System.Diagnostics.ExceptionCounters.GetHistory">
            <summary>
            Returns the list of all exceptions 
            </summary>
            <returns>list of <see cref="T:System.Diagnostics.ExceptionCounter"/></returns>
        </member>
        <member name="M:System.Diagnostics.ExceptionCounters.Clear">
            <summary>
            Clears this counter.
            </summary>
        </member>
        <member name="P:System.Diagnostics.ExceptionCounters.CapacityThreshold">
            <summary>
            Gets or sets the number of exceptions this list can store.
            </summary>
            <value>The capacity.</value>
        </member>
        <member name="T:System.Diagnostics.SystemDescriptor">
            <summary>
            Represents information about any subsystem
            (to be used in monitoring and reports)
            </summary>
        </member>
        <member name="M:System.Diagnostics.SystemDescriptor.#ctor(System.String,System.Version,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.SystemDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="version">The version.</param>
            <param name="configuration">The configuration.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:System.Diagnostics.SystemDescriptor.ToString">
            <summary> <see cref="M:System.Object.ToString"/> </summary>
        </member>
        <member name="P:System.Diagnostics.SystemDescriptor.Version">
            <summary>
            Version of the system
            </summary>
        </member>
        <member name="P:System.Diagnostics.SystemDescriptor.Name">
            <summary>
            Name of the system. I.e.: WebApp
            </summary>
        </member>
        <member name="P:System.Diagnostics.SystemDescriptor.Configuration">
            <summary>
            Configuration of the system. I.e.: DEBUG
            </summary>
        </member>
        <member name="P:System.Diagnostics.SystemDescriptor.Default">
            <summary>
            Gets the default descriptor for the current system.
            </summary>
            <value>The default descriptor.</value>
        </member>
        <member name="P:System.Diagnostics.SystemDescriptor.Instance">
            <summary>
            Instance descriptor. I.e.: 127.0.0.1
            </summary>
        </member>
        <member name="T:System.Enforce">
            <summary>
            Helper class that follows the principles defined by Microsoft P&amp;P team.
            </summary>
            <remarks>
            Code is transparent, no tests are needed.
            </remarks>
        </member>
        <member name="M:System.Enforce.Argument``1(System.Func{``0})">
            <summary>
            <para>Throws exception if the provided object is null. </para>
            <code>Enforce.Argument(() =&gt; args);</code> 
            </summary>
            <typeparam name="TValue">type of the class to check</typeparam>
            <param name="argumentReference">The argument reference to check.</param>
            <exception cref="T:System.ArgumentNullException">If the class reference is null.</exception>
        </member>
        <member name="M:System.Enforce.Arguments``2(System.Func{``0},System.Func{``1})">
            <summary>
            	<para>Throws exception if one of the provided objects is null. </para>
            	<code>Enforce.Arguments(() =&gt; controller, () =&gt; service);</code>
            </summary>
            <param name="first">The first argument to check for</param>
            <param name="second">The second argument to check for.</param>
        </member>
        <member name="M:System.Enforce.Arguments``3(System.Func{``0},System.Func{``1},System.Func{``2})">
            <summary>
            	<para>Throws exception if one of the provided objects is null. </para>
            	<code>Enforce.Arguments(() =&gt; controller, () =&gt; service, () =&gt; parameters);</code>
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <param name="first">The first argument to check</param>
            <param name="second">The second argument to check.</param>
            <param name="third">The third argument to check.</param>
        </member>
        <member name="M:System.Enforce.Arguments``4(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3})">
            <summary>
            	<para>Throws exception if one of the provided objects is null. </para>
            	<code>Enforce.Arguments(() =&gt; controller, () =&gt; service, () =&gt; parameters);</code>
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <typeparam name="T4">The type of the fourth argument.</typeparam>
            <param name="first">The first argument to check.</param>
            <param name="second">The second argument to check.</param>
            <param name="third">The third argument to check.</param>
            <param name="fourth">The fourth argument to check.</param>
        </member>
        <member name="M:System.Enforce.Arguments``5(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4})">
            <summary>
            	<para>Throws exception if one of the provided objects is null. </para>
            	<code>Enforce.Arguments(() =&gt; controller, () =&gt; service, () =&gt; parameters);</code>
            </summary>
            <typeparam name="T1">The type of the first argument.</typeparam>
            <typeparam name="T2">The type of the second argument.</typeparam>
            <typeparam name="T3">The type of the third argument.</typeparam>
            <typeparam name="T4">The type of the fourth argument.</typeparam>
            <typeparam name="T5">The type of the fifth argument.</typeparam>
            <param name="first">The first argument to check.</param>
            <param name="second">The second argument to check.</param>
            <param name="third">The third argument to check.</param>
            <param name="fourth">The fourth argument to check.</param>
            <param name="fifth">The fifth argument to check.</param>
        </member>
        <member name="M:System.Enforce.ArgumentNotEmpty(System.Func{System.String})">
            <summary>
            Throws proper exception if the provided string argument is null or empty. 
            </summary>
            <returns>Original string.</returns>
            <exception cref="T:System.ArgumentNullException">If the string argument is null or empty.</exception>
        </member>
        <member name="M:System.Enforce.That(System.Boolean,System.String)">
            <summary>
            Throws exception if the check does not pass.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the assertion has failed.</exception>
        </member>
        <member name="M:System.Enforce.That(System.Boolean)">
            <summary>
            Throws exception if the check does not pass.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the assertion has failed.</exception>
        </member>
        <member name="M:System.Enforce.With``1(System.Boolean,System.String,System.Object[])">
            <summary>
            Throws <typeparamref name="TException"/> if the <paramref name="check"/>
            failes
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="check">Check that should be true.</param>
            <param name="message">The message.</param>
            <param name="args">String arguments.</param>
            <exception cref="T:System.Exception">of <typeparamref name="TException"/> type</exception>
        </member>
        <member name="M:System.Enforce.Argument(System.Boolean,System.String,System.String)">
            <summary> Throws exception if the argument fails the <paramref name="check"/> </summary>
            <param name="check">Throw exception if false.</param>
            <param name="paramName">Name of the param.</param>
            <param name="checkName">Name of the check.</param>
            <exception cref="T:System.ArgumentException">When the argument fails the check</exception>
        </member>
        <member name="M:System.Enforce.NotNull``1(System.Func{``0})">
            <summary>
            Throws proper exception if the class reference is null.
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="value">Class reference to check.</param>
            <exception cref="T:System.InvalidOperationException">If class reference is null.</exception>
        </member>
        <member name="M:System.Enforce.ArgumentNotNull``1(``0,System.String)">
            <summary>
            Throws proper exception if the provided class reference is null.
            Can be used for inline checks.
            </summary>
            <typeparam name="TValue">Class type</typeparam>
            <param name="value">Class reference to check.</param>
            <param name="argumentName">Name of the argument.</param>
            <returns>Original reference.</returns>
            <exception cref="T:System.ArgumentNullException">If the class reference is null.</exception>
        </member>
        <member name="M:System.Enforce.Argument``1(System.Func{``0},System.Rules.Rule{``0}[])">
            <summary>
            Runs the rules against single argument, using failfast scope
            </summary>
            <typeparam name="T">type of the item to validate</typeparam>
            <param name="argumentReference">The argument reference.</param>
            <param name="rules">The rules.</param>
        </member>
        <member name="M:System.Enforce.Argument``1(System.Func{System.Collections.Generic.IEnumerable{``0}},System.Rules.Rule{``0}[])">
            <summary>
            Runs the rules against single collection, using failfast scope
            </summary>
            <typeparam name="T">type of the item to validate</typeparam>
            <param name="items">The items to validate.</param>
            <param name="rules">The rules.</param>
        </member>
        <member name="M:System.Enforce.That``1(``0,System.Rules.Rule{``0}[])">
            <summary>
            Runs the rules against single argument, using failfast scope
            </summary>
            <typeparam name="T">type of the item to validate</typeparam>
            <param name="item">The item to validate.</param>
            <param name="rules">The rules.</param>
            <exception cref="T:System.InvalidOperationException">When check fails</exception>
        </member>
        <member name="M:System.Enforce.That``1(System.Collections.Generic.IEnumerable{``0},System.Rules.Rule{``0}[])">
            <summary>
            Runs the rules against single collection, using failfast scope
            </summary>
            <typeparam name="T">type of the item to validate</typeparam>
            <param name="items">The items to validate.</param>
            <param name="rules">The rules.</param>
            <exception cref="T:System.InvalidOperationException">When check fails</exception>
        </member>
        <member name="T:System.Event">
            <summary>
            Helper class for handling events
            </summary>
        </member>
        <member name="M:System.Event.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises the strongly typed event
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler"></param>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="M:System.Event.Raise``1(System.EventHandler{System.EventArgs{``0}},System.Object,``0)">
            <summary>
            Raises the strongly typed event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler"></param>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="M:System.Event.Raise``1(System.EventHandlerFor{``0},System.Object,``0)">
            <summary>
            Raises the strongly typed event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:System.Event.Raise``1(System.ControlHandlerFor{``0},System.Object,``0)">
            <summary>
            Raises the strongly typed event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:System.Event.ArgsFrom``1(``0)">
            <summary>
            Creates <see cref="T:System.EventArgs`1"/> out of the provided instance
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:System.Event.WriteableArgsFrom``1(``0)">
            <summary>
            Creates <see cref="T:System.ControlArgs`1"/> out of the provided instance.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="T:System.ICollectionExtensions">
            <summary>
            Simple helper extensions for <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
        </member>
        <member name="M:System.ICollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds all items to the target collection
            </summary>
            <typeparam name="T">type of the item within the collection</typeparam>
            <param name="collection">The collection</param>
            <param name="items">items to add to the collection</param>
            <returns>same collection instance</returns>
        </member>
        <member name="M:System.ICollectionExtensions.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes all items from the target collection
            </summary>
            <typeparam name="T">type of the item within the collection</typeparam>
            <param name="collection">The collection.</param>
            <param name="items">The items.</param>
            <returns>same collection instance</returns>
        </member>
        <member name="M:System.ICollectionExtensions.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Shortcut to determine whether the specified <see cref="T:System.Collections.Generic.ICollection`1"/> is empty.
            </summary>
            <typeparam name="T">items in the collection</typeparam>
            <param name="self">The collection.</param>
            <returns>
            	<c>true</c> if the specified self is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:System.ICommand">
            <summary>
            Generic interface for the command pattern.
            </summary>
        </member>
        <member name="M:System.ICommand.Execute">
            <summary>
            Encapsulates action
            </summary>
        </member>
        <member name="T:System.IEnumerableExtensions">
            <summary>
            Helper methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:System.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified <see cref="T:System.Action`1"/> against every element of <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">Enumerable to extend</param>
            <param name="action">Action to perform</param>
            <exception cref="T:System.ArgumentNullException">When any parameter is null</exception>
        </member>
        <member name="M:System.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs the specified <see cref="T:System.Action`1"/> against every element of <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">Enumerable to extend</param>
            <param name="action">Action to perform; second parameter represents the index</param>
            <exception cref="T:System.ArgumentNullException">When any parameter is null</exception>
        </member>
        <member name="M:System.IEnumerableExtensions.Apply``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Applies the specified action to the target <paramref name="enumerable"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="action">The action to execute against every item.</param>
            <returns>enumerator</returns>
            <exception cref="T:System.ArgumentNullException">when one of the values is null</exception>
        </member>
        <member name="M:System.IEnumerableExtensions.Apply``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Applies the specified action to the target <paramref name="enumerable"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="action">The action to execute against every item; second
            parameter represents the index.</param>
            <returns>enumerator</returns>
            <exception cref="T:System.ArgumentNullException">when one of the values is null</exception>
        </member>
        <member name="M:System.IEnumerableExtensions.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Returns <em>True</em> as soon as the first member of <paramref name="enumerable"/>
            mathes <paramref name="predicate"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable</param>
            <param name="predicate">The predicate.</param>
            <returns></returns>
        </member>
        <member name="M:System.IEnumerableExtensions.Exists``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks if the provided enumerable has anything
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:System.IEnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends the <paramref name="item"/> to the <paramref name="enumerable"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:System.IEnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Appends the specified <paramref name="range"/> to the <paramref name="enumerable"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="range">The range.</param>
            <returns></returns>
        </member>
        <member name="M:System.IEnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepends the specified <paramref name="enumerable"/> with the <paramref name="item"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:System.IEnumerableExtensions.ToSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the enumerable to <see cref="T:System.Collections.Generic.HashSet`1"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns>hashset instance</returns>
        </member>
        <member name="M:System.IEnumerableExtensions.ToSet``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
            Converts the enumerable to <see cref="T:System.Collections.Generic.HashSet`1"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="selector">The selector.</param>
            <returns>hashset instance</returns>
        </member>
        <member name="M:System.IEnumerableExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the minimum value in a generic sequence, using the provided comparer
            </summary>
            <typeparam name="T">Type of the elements of <paramref name="source"/></typeparam>
            <param name="source">Original sequence.</param>
            <param name="comparer">The comparer.</param>
            <returns>Maximum value</returns>
        </member>
        <member name="M:System.IEnumerableExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the maximum value in a generic sequence using the provided comparer.
            </summary>
            <typeparam name="T">Type of the elements of <paramref name="source"/></typeparam>
            <param name="source">Original sequence.</param>
            <param name="comparer">The comparer.</param>
            <returns>Maximum value</returns>
        </member>
        <member name="M:System.IEnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates a specified separator between each element of a specified <paramref name="strings"/>, 
            yielding a single concatenated string.
            </summary>
            <param name="strings">The strings.</param>
            <param name="separator">The separator.</param>
            <returns>concatenated string</returns>
        </member>
        <member name="M:System.IEnumerableExtensions.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32},System.Int32)">
            <summary>
            <para>Performs lazy splitting of the provided collection into collections of <paramref name="sliceLength"/>.</para>
            <para>Each collection will have total <em>weight</em> equal or less than <paramref name="maxSliceWeight"/></para>
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="source">The source collection to slice.</param>
            <param name="sliceLength">Length of the slice.</param>
            <param name="weightDelegate">Function to calculate <em>weight</em> of each item in the collection</param>
            <param name="maxSliceWeight">The max item weight.</param>
            <returns>enumerator over the results</returns>
        </member>
        <member name="M:System.IEnumerableExtensions.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Performs lazy splitting of the provided collection into collections of <paramref name="sliceLength"/>
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <param name="source">The source.</param>
            <param name="sliceLength">Maximum length of the slice.</param>
            <returns>lazy enumerator of the collection of arrays</returns>
        </member>
        <member name="M:System.IEnumerableExtensions.ToJaggedArray``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Converts collection of collections to jagged array
            </summary>
            <typeparam name="T">type of the items in collection</typeparam>
            <param name="collection">The collection.</param>
            <returns>jagged array</returns>
        </member>
        <member name="T:System.Diagnostics.ExecutionCounter">
            <summary>
            Class to provide simple measurement of some method calls
            </summary>
        </member>
        <member name="M:System.Diagnostics.ExecutionCounter.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.ExecutionCounter"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="openCounterCount">The open counter count.</param>
            <param name="closeCounterCount">The close counter count.</param>
        </member>
        <member name="M:System.Diagnostics.ExecutionCounter.Open(System.Int64[])">
            <summary>
            Open the specified counter and adds the provided values to the openCounters collection
            </summary>
            <param name="openCounters">The open counters.</param>
            <returns>timestamp for the operation</returns>
        </member>
        <member name="M:System.Diagnostics.ExecutionCounter.Close(System.Int64,System.Int64[])">
            <summary>
            Closes the specified timestamp.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="closeCounters">The close counters.</param>
        </member>
        <member name="M:System.Diagnostics.ExecutionCounter.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:System.Diagnostics.ExecutionCounter.ToStatistics">
            <summary>
            Converts this instance to <see cref="T:System.Diagnostics.ExecutionStatistics"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.ILogExtensions">
            <summary>
            Helper extensions for any class that implements <see cref="T:System.ILog"/>
            </summary>
        </member>
        <member name="M:System.ILogExtensions.IsDebugEnabled(System.ILog)">
            <summary>
            Determines whether the specified log is recording debug messages.
            </summary>
            <param name="log">The log.</param>
            <returns>
            	<c>true</c> if the specified log is recording debug messages; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.ILogExtensions.Debug(System.ILog,System.Object)">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Debug"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="message">Message</param>
        </member>
        <member name="M:System.ILogExtensions.DebugFormat(System.ILog,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Debug"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:System.ILogExtensions.Debug(System.ILog,System.Exception,System.Object)">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Debug"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="message">Message</param>
        </member>
        <member name="M:System.ILogExtensions.DebugFormat(System.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Debug"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:System.ILogExtensions.IsInfoEnabled(System.ILog)">
            <summary>
            Determines whether the specified log is recording info messages.
            </summary>
            <param name="log">The log.</param>
            <returns>
            	<c>true</c> if the specified log is recording info messages; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.ILogExtensions.Info(System.ILog,System.Object)">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Info"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="message">Message</param>
        </member>
        <member name="M:System.ILogExtensions.InfoFormat(System.ILog,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Info"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:System.ILogExtensions.Info(System.ILog,System.Exception,System.Object)">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Info"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="message">Message</param>
        </member>
        <member name="M:System.ILogExtensions.InfoFormat(System.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Info"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:System.ILogExtensions.IsWarnEnabled(System.ILog)">
            <summary>
            Determines whether the specified log is recording warning messages.
            </summary>
            <param name="log">The log.</param>
            <returns>
            	<c>true</c> if the specified log is recording warning messages; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.ILogExtensions.Warn(System.ILog,System.Object)">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Warn"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="message">Message</param>
        </member>
        <member name="M:System.ILogExtensions.WarnFormat(System.ILog,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Warn"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:System.ILogExtensions.Warn(System.ILog,System.Exception,System.Object)">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Warn"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="message">Message</param>
        </member>
        <member name="M:System.ILogExtensions.WarnFormat(System.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Warn"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:System.ILogExtensions.IsErrorEnabled(System.ILog)">
            <summary>
            Determines whether the specified log is recording error messages.
            </summary>
            <param name="log">The log.</param>
            <returns>
            	<c>true</c> if the specified log is recording error messages; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.ILogExtensions.Error(System.ILog,System.Object)">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Error"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="message">Message</param>
        </member>
        <member name="M:System.ILogExtensions.ErrorFormat(System.ILog,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Error"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:System.ILogExtensions.Error(System.ILog,System.Exception,System.Object)">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Error"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="message">Message</param>
        </member>
        <member name="M:System.ILogExtensions.ErrorFormat(System.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Error"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:System.ILogExtensions.IsFatalEnabled(System.ILog)">
            <summary>
            Determines whether the specified log is recording Fatal messages.
            </summary>
            <param name="log">The log.</param>
            <returns>
            	<c>true</c> if the specified log is recording datal messages; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.ILogExtensions.Fatal(System.ILog,System.Object)">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Fatal"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="message">Message</param>
        </member>
        <member name="M:System.ILogExtensions.FatalFormat(System.ILog,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Fatal"/> level
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:System.ILogExtensions.Fatal(System.ILog,System.Exception,System.Object)">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Fatal"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="message">Message</param>
        </member>
        <member name="M:System.ILogExtensions.FatalFormat(System.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Writes message with <see cref="F:System.LogLevel.Fatal"/> level and
            appends the specified <see cref="T:System.Exception"/>
            </summary>
            <param name="log">Log instance being extended</param>
            <param name="ex">Exception to add to the message</param>
            <param name="format">Format string as in 
            <see cref="M:System.String.Format(System.String,System.Object[])"/></param>
            <param name="args">Arguments</param>
        </member>
        <member name="T:System.ILogProviderExtensions">
            <summary>
            Extension methods for the <see cref="T:System.INamedProvider`1"/>
            of <see cref="T:System.ILog"/>
            </summary>
        </member>
        <member name="M:System.ILogProviderExtensions.CreateLog``1(System.INamedProvider{System.ILog})">
            <summary>
            Creates new log using the type as name.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:System.LogLevel">
            <summary>
            Degines the importance level associated with the log
            entry in <see cref="T:System.ILog"/>
            </summary>
        </member>
        <member name="F:System.LogLevel.Debug">
            <summary> Message is intended for debugging </summary>
        </member>
        <member name="F:System.LogLevel.Info">
            <summary> Informatory message </summary>
        </member>
        <member name="F:System.LogLevel.Warn">
            <summary> The message is about potential problem in the system </summary>
        </member>
        <member name="F:System.LogLevel.Error">
            <summary> Some error has occured </summary>
        </member>
        <member name="F:System.LogLevel.Fatal">
            <summary> Message is associated with the critical problem </summary>
        </member>
        <member name="F:System.LogLevel.Max">
            <summary>
            Highest possible level
            </summary>
        </member>
        <member name="F:System.LogLevel.Min">
            <summary> Smallest logging level</summary>
        </member>
        <member name="T:System.Diagnostics.NullLog">
            <summary>
            <see cref="T:System.ILog"/> that does not do anything
            </summary>
        </member>
        <member name="F:System.Diagnostics.NullLog.Instance">
            <summary>
            Singleton instance of the <see cref="T:System.ILog"/>
            </summary>
        </member>
        <member name="F:System.Diagnostics.NullLog.Provider">
            <summary>
            Named provider for the <see cref="T:System.Diagnostics.NullLog"/>
            </summary>
        </member>
        <member name="T:System.Diagnostics.ExecutionStatistics">
            <summary>
            Statistics about some exection counter
            </summary>
        </member>
        <member name="M:System.Diagnostics.ExecutionStatistics.#ctor(System.String,System.Int64,System.Int64,System.Int64[],System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.ExecutionStatistics"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="openCount">The open count.</param>
            <param name="closeCount">The close count.</param>
            <param name="counters">The counters.</param>
            <param name="runningTime">The running time.</param>
        </member>
        <member name="P:System.Diagnostics.ExecutionStatistics.OpenCount">
            <summary>
            Gets the number of times the counter has been opened
            </summary>
            <value>The open count.</value>
        </member>
        <member name="P:System.Diagnostics.ExecutionStatistics.CloseCount">
            <summary>
            Gets the number of times the counter has been properly closed.
            </summary>
            <value>The close count.</value>
        </member>
        <member name="P:System.Diagnostics.ExecutionStatistics.Counters">
            <summary>
            Gets the native counters collected by this counter.
            </summary>
            <value>The counters.</value>
        </member>
        <member name="P:System.Diagnostics.ExecutionStatistics.RunningTime">
            <summary>
            Gets the total running time between open and close statements in ticks.
            </summary>
            <value>The running time expressed in 100-nanosecond units.</value>
        </member>
        <member name="P:System.Diagnostics.ExecutionStatistics.Name">
            <summary>
            Gets the name for this counter.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:System.Container.RegistrationType">
            <summary>
            Enum that defines registration modes for the auto-registration
            </summary>
        </member>
        <member name="F:System.Container.RegistrationType.Type">
            <summary>
            Component is to be registered by its type
            </summary>
        </member>
        <member name="F:System.Container.RegistrationType.Name">
            <summary>
            Component is to be registered by its name
            </summary>
        </member>
        <member name="F:System.Container.RegistrationType.Service">
            <summary>
            Component is to be registered as a service
            </summary>
        </member>
        <member name="T:System.HandlingProvider`2">
            <summary>
            Simple reliability layer for the <see cref="T:System.IProvider`2"/>
            </summary>
            <typeparam name="TKey">type of the Key item</typeparam>
            <typeparam name="TValue">type of the values</typeparam>
        </member>
        <member name="M:System.HandlingProvider`2.#ctor(System.IProvider{`0,`1},System.ActionPolicy)">
            <summary>
            Creates generic reliability wrapper around the <see cref="T:System.IProvider`2"/>
            </summary>
            <param name="provider"></param>
            <param name="policy"></param>
        </member>
        <member name="M:System.HandlingProvider`2.Get(`0)">
            <summary>
            <see cref="M:System.IProvider`2.Get(`0)"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:System.HandlingProvider">
            <summary>
            This shortcuts simplifies creation of <see cref="T:System.HandlingProvider"/> instances
            </summary>
        </member>
        <member name="M:System.HandlingProvider.For``2(System.IProvider{``0,``1},System.ActionPolicy)">
            <summary>
            Creates new instance of <see cref="T:System.HandlingProvider`2"/>
            by wrapping another <see cref="T:System.IProvider`2"/> instance
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="provider">The provider to wrap.</param>
            <param name="policy">The action policy.</param>
            <returns>new provider instance</returns>
        </member>
        <member name="T:System.StreamExtensions">
            <summary>
            Simple helper extensions for the <see cref="T:System.IO.Stream"/>
            </summary>
        </member>
        <member name="M:System.StreamExtensions.Compress(System.IO.Stream)">
            <summary>
            Wraps the stream with Compression stream
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:System.StreamExtensions.Decompress(System.IO.Stream)">
            <summary>
            Wraps the stream with Decompressing stream
            </summary>
        </member>
        <member name="M:System.StreamExtensions.PumpTo(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies contents of this stream to the target stream
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="bufferSize"></param>
            <returns></returns>
        </member>
        <member name="T:System.SystemUtil">
            <summary>
            System utils to improve testability of the code
            </summary>
        </member>
        <member name="F:System.SystemUtil._sleep">
            <summary>
            <see cref="M:System.Threading.Thread.Sleep(System.TimeSpan)"/>
            </summary>
        </member>
        <member name="F:System.SystemUtil._dateTimeProvider">
            <summary>
            Allows to set custom date time implementation for the testing purposes.
            </summary>
        </member>
        <member name="M:System.SystemUtil.Reset">
            <summary>
            Returns all overridable functions to default. To be used by test teardowns
            </summary>
        </member>
        <member name="M:System.SystemUtil.SetSleep(System.Action{System.TimeSpan})">
            <summary>
            Sets the custom sleep routine.
            </summary>
            <param name="sleepRoutine">The sleep routine.</param>
        </member>
        <member name="M:System.SystemUtil.SetDateTimeProvider(System.Func{System.DateTime})">
            <summary>
            Sets the custom date time provider routine.
            </summary>
            <param name="dateTimeProvider">The date time provider.</param>
        </member>
        <member name="M:System.SystemUtil.SetTime(System.DateTime)">
            <summary>
            Shortcut to set the custom date time.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:System.SystemUtil.Sleep(System.TimeSpan)">
            <summary>
            Invokes the method associated with sleeping. For the production purposes
            this should be a call to <see cref="M:System.Threading.Thread.Sleep(System.TimeSpan)"/>
            </summary>
            <param name="span">The span.</param>
        </member>
        <member name="P:System.SystemUtil.Now">
            <summary>
            <see cref="P:System.DateTime.Now"/>
            </summary>
        </member>
        <member name="T:System.TimeSpanExtensions">
            <summary>
            Small class to streamline the code around <see cref="T:System.TimeSpan"/>
            </summary>
        </member>
        <member name="M:System.TimeSpanExtensions.Minutes(System.Double)">
            <summary>
            
            </summary>
            <param name="minutes"></param>
            <returns></returns>
            <example>3.Minutes()</example>
        </member>
        <member name="M:System.TimeSpanExtensions.Seconds(System.Double)">
            <summary>
            <see cref="M:System.TimeSpan.FromSeconds(System.Double)"/>
            </summary>
            <param name="seconds"></param>
            <returns></returns>
            <example>2.Seconds()</example>
        </member>
        <member name="M:System.TimeSpanExtensions.Milliseconds(System.Double)">
            <summary>
            <see cref="M:System.TimeSpan.FromMilliseconds(System.Double)"/>
            </summary>
            <param name="milliseconds">milliseconds for this timespan</param>
            <returns></returns>
        </member>
        <member name="M:System.TimeSpanExtensions.Minutes(System.Int32)">
            <summary>
            
            </summary>
            <param name="minutes"></param>
            <returns></returns>
            <example>3.Minutes()</example>
        </member>
        <member name="M:System.TimeSpanExtensions.Seconds(System.Int32)">
            <summary>
            <see cref="M:System.TimeSpan.FromSeconds(System.Double)"/>
            </summary>
            <param name="seconds"></param>
            <returns></returns>
            <example>2.Seconds()</example>
        </member>
        <member name="M:System.TimeSpanExtensions.Milliseconds(System.Int32)">
            <summary>
            <see cref="M:System.TimeSpan.FromMilliseconds(System.Double)"/>
            </summary>
            <param name="milliseconds">milliseconds for this timespan</param>
            <returns></returns>
        </member>
        <member name="T:System.ControlHandlerFor`1">
            <summary>
            Represents the method that will handle a typed event.
            Associated data can be modified
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sender"></param>
            <param name="args"></param>
            <seealso cref="T:System.ControlArgs`1"/>
        </member>
        <member name="T:System.VersionUtil">
            <summary>
            Helper class for <see cref="T:System.Version"/>
            </summary>
        </member>
        <member name="M:System.VersionUtil.Normalize(System.Version)">
            <summary>
            Normalizes the specified version by replacing all -1 with 0
            </summary>
            <param name="version">The version.</param>
            <returns>version that has all 0 replaced with -1</returns>
        </member>
        <member name="T:System.XmlUtil`1">
            <summary>
            Simple static class that caches <see cref="T:System.Xml.Serialization.XmlSerializer"/> instances.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.XmlUtil`1.Serialize(`0,System.IO.TextWriter)">
            <summary> Serializes instance to the provided writer </summary>
        </member>
        <member name="M:System.XmlUtil`1.Serialize(`0,System.IO.Stream)">
            <summary> Serializes instance to the provided stream </summary>
        </member>
        <member name="M:System.XmlUtil`1.Serialize(`0)">
            <summary>
            Serializes instance to the Xml string
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:System.XmlUtil`1.Deserialize(System.String)">
            <summary>
            Helper method for testing - quickly creates object from string
            </summary>
            <param name="source">xml string</param>
            <returns></returns>
        </member>
        <member name="M:System.XmlUtil`1.Deserialize(System.IO.Stream)">
            <summary>
            Helper method to deserialize from the stream using
            the cached serializer.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:System.XmlUtil">
            <summary>
            Helper class for the xml operations
            </summary>
        </member>
        <member name="M:System.XmlUtil.TestXmlSerialization``1(``0)">
            <summary>
            Helper method for testing - checks if the object can be serialized
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
        </member>
        <member name="M:System.XmlUtil.TestXmlSerialization``1">
            <summary>
            Helper method for testing - checks if the class can be serialized
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.XmlUtil.TestXmlSerialization(System.Type)">
            <summary>
            Tests the XML serialization.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:System.XmlUtil.Serialize``1(``0,System.IO.TextWriter)">
            <summary>
            <see cref="M:System.XmlUtil`1.Serialize(`0,System.IO.Stream)"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <param name="instance"></param>
        </member>
        <member name="M:System.XmlUtil.SerializeArray``1(``0[],System.IO.TextWriter)">
            <summary>
            	<see cref="M:System.XmlUtil`1.Serialize(`0,System.IO.Stream)"/>
            </summary>
            <typeparam name="T">type of the item to serialize</typeparam>
            <param name="stream">The stream.</param>
            <param name="array">The array.</param>
        </member>
        <member name="M:System.XmlUtil.Serialize``1(``0,System.IO.Stream)">
            <summary>
            <see cref="M:System.XmlUtil`1.Serialize(`0,System.IO.Stream)"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <param name="instance"></param>
        </member>
        <member name="M:System.XmlUtil.SerializeArray``1(``0[],System.IO.Stream)">
            <summary>
            	<see cref="M:System.XmlUtil`1.Serialize(`0,System.IO.Stream)"/>
            </summary>
            <typeparam name="T">type of the item to serialize</typeparam>
            <param name="stream">The stream.</param>
            <param name="array">The array.</param>
        </member>
        <member name="M:System.XmlUtil.Deserialize``1(System.IO.Stream)">
            <summary>
            <see cref="M:System.XmlUtil`1.Deserialize(System.IO.Stream)"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:System.XmlUtil.Serialize``1(``0)">
            <summary> Serializes the specified instance. </summary>
            <typeparam name="T">type of the item to serialize</typeparam>
            <param name="instance">The instance.</param>
            <returns>String representation</returns>
        </member>
        <member name="M:System.XmlUtil.SerializeArray``1(``0[])">
            <summary>
            Serializes the specified instance.
            </summary>
            <typeparam name="T">type of the item to serialize</typeparam>
            <param name="array">The array.</param>
            <returns>String representation</returns>
        </member>
    </members>
</doc>
